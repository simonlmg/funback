(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> not all arguments converted during string formatting"
p3
sS'layer'
p4
S'/Users/cyan/Package/GitHub/funback/web2py/applications/admin/controllers/default.py'
p5
sS'code'
p6
S'# coding: utf8\n\nEXPERIMENTAL_STUFF = True\n\nif EXPERIMENTAL_STUFF:\n    is_mobile = request.user_agent().is_mobile\n    if is_mobile:\n        response.view = response.view.replace(\'default/\',\'default.mobile/\')\n        response.menu = []\n\nfrom gluon.admin import *\nfrom gluon.fileutils import abspath, read_file, write_file\nfrom glob import glob\nimport shutil\nimport platform\n\nif DEMO_MODE and request.function in [\'change_password\',\'pack\',\'pack_plugin\',\'upgrade_web2py\',\'uninstall\',\'cleanup\',\'compile_app\',\'remove_compiled_app\',\'delete\',\'delete_plugin\',\'create_file\',\'upload_file\',\'update_languages\',\'reload_routes\']:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\nif not is_manager() and request.function in [\'change_password\',\'upgrade_web2py\']:\n    session.flash = T(\'disabled in multi user mode\')\n    redirect(URL(\'site\'))\n\nif FILTER_APPS and request.args(0) and not request.args(0) in FILTER_APPS:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\ndef safe_open(a,b):\n    if DEMO_MODE and \'w\' in b:\n        class tmp:\n            def write(self,data): pass\n        return tmp()\n    return open(a,b)\n\ndef safe_read(a, b=\'r\'):\n    safe_file = safe_open(a, b)\n    try:\n        return safe_file.read()\n    finally:\n        safe_file.close()\n\ndef safe_write(a, value, b=\'w\'):\n    safe_file = safe_open(a, b)\n    try:\n        safe_file.write(value)\n    finally:\n        safe_file.close()\n\ndef get_app(name=None):\n    app = name or request.args(0)\n    if app and (not MULTI_USER_MODE or db(db.app.name==app)(db.app.owner==auth.user.id).count()):\n        return app\n    session.flash = \'App does not exist or your are not authorized\'\n    redirect(URL(\'site\'))\n\ndef index():\n    """ Index handler """\n\n    send = request.vars.send\n    if DEMO_MODE:\n        session.authorized = True\n        session.last_time = t0\n    if not send:\n        send = URL(\'site\')\n    if session.authorized:\n        redirect(send)\n    elif request.vars.password:\n        if verify_password(request.vars.password):\n            session.authorized = True\n            login_record(True)\n\n            if CHECK_VERSION:\n                session.check_version = True\n            else:\n                session.check_version = False\n\n            session.last_time = t0\n            if isinstance(send, list):  # ## why does this happen?\n                send = str(send[0])\n\n            redirect(send)\n        else:\n            times_denied = login_record(False)\n            if times_denied >= allowed_number_of_attempts:\n                response.flash = \\\n                    T(\'admin disabled because too many invalid login attempts\')\n            elif times_denied == allowed_number_of_attempts - 1:\n                response.flash = \\\n                    T(\'You have one more login attempt before you are locked out\')\n            else:\n                response.flash = T(\'invalid password.\')\n    return dict(send=send)\n\n\ndef check_version():\n    """ Checks if web2py is up to date """\n\n    session.forget()\n    session._unlock(response)\n\n    new_version, version_number = check_new_version(request.env.web2py_version,\n                                    WEB2PY_VERSION_URL)\n\n    if new_version == -1:\n        return A(T(\'Unable to check for upgrades\'), _href=WEB2PY_URL)\n    elif new_version != True:\n        return A(T(\'web2py is up to date\'), _href=WEB2PY_URL)\n    elif platform.system().lower() in (\'windows\',\'win32\',\'win64\') and os.path.exists("web2py.exe"):\n        return SPAN(\'You should upgrade to version %s\' % version_number)\n    else:\n        return sp_button(URL(\'upgrade_web2py\'), T(\'upgrade now\')) \\\n          + XML(\' <strong class="upgrade_version">%s</strong>\' % version_number)\n\n\ndef logout():\n    """ Logout handler """\n    session.authorized = None\n    if MULTI_USER_MODE:\n        redirect(URL(\'user/logout\'))\n    redirect(URL(\'index\'))\n\n\ndef change_password():\n\n    if session.pam_user:\n        session.flash = T(\'PAM authenticated user, cannot change password here\')\n        redirect(URL(\'site\'))\n    form=SQLFORM.factory(Field(\'current_admin_password\',\'password\'),\n                         Field(\'new_admin_password\',\'password\',requires=IS_STRONG()),\n                         Field(\'new_admin_password_again\',\'password\'))\n    if form.accepts(request.vars):\n        if not verify_password(request.vars.current_admin_password):\n            form.errors.current_admin_password = T(\'invalid password\')\n        elif form.vars.new_admin_password != form.vars.new_admin_password_again:\n            form.errors.new_admin_password_again = T(\'no match\')\n        else:\n            path = abspath(\'parameters_%s.py\' % request.env.server_port)\n            safe_write(path, \'password="%s"\' % CRYPT()(request.vars.new_admin_password)[0])\n            session.flash = T(\'password changed\')\n            redirect(URL(\'site\'))\n    return dict(form=form)\n\ndef site():\n    """ Site handler """\n\n    myversion = request.env.web2py_version\n\n    # Shortcut to make the elif statements more legible\n    file_or_appurl = \'file\' in request.vars or \'appurl\' in request.vars\n\n    if DEMO_MODE:\n        pass\n\n    elif request.vars.filename and not \'file\' in request.vars:\n        # create a new application\n        appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n        if app_create(appname, request):\n            if MULTI_USER_MODE:\n                db.app.insert(name=appname,owner=auth.user.id)\n            session.flash = T(\'new application "%s" created\', appname)\n            redirect(URL(\'design\',args=appname))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s" (it may exist already)\', request.vars.filename)\n        redirect(URL(r=request))\n\n    elif file_or_appurl and not request.vars.filename:\n        # can\'t do anything without an app name\n        msg = \'you must specify a name for the uploaded application\'\n        response.flash = T(msg)\n\n    elif file_or_appurl and request.vars.filename:\n        # fetch an application via URL or file upload\n        f = None\n        if request.vars.appurl is not \'\':\n            try:\n                f = urllib.urlopen(request.vars.appurl)\n            except Exception, e:\n                session.flash = DIV(T(\'Unable to download app because:\'),PRE(str(e)))\n                redirect(URL(r=request))\n            fname = request.vars.appurl\n        elif request.vars.file is not \'\':\n            f = request.vars.file.file\n            fname = request.vars.file.filename\n\n        if f:\n            appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n            installed = app_install(appname, f, request, fname,\n                                    overwrite=request.vars.overwrite_check)\n        if f and installed:\n            msg = \'application %(appname)s installed with md5sum: %(digest)s\'\n            session.flash = T(msg, dict(appname=appname,\n                                        digest=md5_hash(installed)))\n        elif f and request.vars.overwrite_check:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        else:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        redirect(URL(r=request))\n\n    regex = re.compile(\'^\\w+$\')\n\n    if is_manager():\n        apps = [f for f in os.listdir(apath(r=request)) if regex.match(f)]\n    else:\n        apps = [f.name for f in db(db.app.owner==auth.user_id).select()]\n\n    if FILTER_APPS:\n        apps = [f for f in apps if f in FILTER_APPS]\n\n    apps = sorted(apps,lambda a,b:cmp(a.upper(),b.upper()))\n\n    return dict(app=None, apps=apps, myversion=myversion)\n\n\ndef pack():\n    app = get_app()\n\n    if len(request.args) == 1:\n        fname = \'web2py.app.%s.w2p\' % app\n        filename = app_pack(app, request)\n    else:\n        fname = \'web2py.app.%s.compiled.w2p\' % app\n        filename = app_pack_compiled(app, request)\n\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'site\'))\n\ndef pack_plugin():\n    app = get_app()\n    if len(request.args) == 2:\n        fname = \'web2py.plugin.%s.w2p\' % request.args[1]\n        filename = plugin_pack(app, request.args[1], request)\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'plugin\',args=request.args))\n\ndef upgrade_web2py():\n    if \'upgrade\' in request.vars:\n        (success, error) = upgrade(request)\n        if success:\n            session.flash = T(\'web2py upgraded; please restart it\')\n        else:\n            session.flash = T(\'unable to upgrade because "%s"\', error)\n        redirect(URL(\'site\'))\n    elif \'noupgrade\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict()\n\ndef uninstall():\n    app = get_app()\n    if \'delete\' in request.vars:\n        if MULTI_USER_MODE:\n            if is_manager() and db(db.app.name==app).delete():\n                pass\n            elif db(db.app.name==app)(db.app.owner==auth.user.id).delete():\n                pass\n            else:\n                session.flash = T(\'no permission to uninstall "%s"\', app)\n                redirect(URL(\'site\'))\n        if app_uninstall(app, request):\n            session.flash = T(\'application "%s" uninstalled\', app)\n        else:\n            session.flash = T(\'unable to uninstall "%s"\', app)\n        redirect(URL(\'site\'))\n    elif \'nodelete\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict(app=app)\n\n\ndef cleanup():\n    app = get_app()\n    clean = app_cleanup(app, request)\n    if not clean:\n        session.flash = T("some files could not be removed")\n    else:\n        session.flash = T(\'cache, errors and sessions cleaned\')\n\n    redirect(URL(\'site\'))\n\n\ndef compile_app():\n    app = get_app()\n    c = app_compile(app, request)\n    if not c:\n        session.flash = T(\'application compiled\')\n    else:\n        session.flash = DIV(T(\'Cannot compile: there are errors in your app:\'),\n                              CODE(c))\n    redirect(URL(\'site\'))\n\n\ndef remove_compiled_app():\n    """ Remove the compiled application """\n    app = get_app()\n    remove_compiled_application(apath(app, r=request))\n    session.flash = T(\'compiled application removed\')\n    redirect(URL(\'site\'))\n\ndef delete():\n    """ Object delete handler """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    sender = request.vars.sender\n\n    if isinstance(sender, list):  # ## fix a problem with Vista\n        sender = sender[0]\n\n    if \'nodelete\' in request.vars:\n        redirect(URL(sender))\n    elif \'delete\' in request.vars:\n        try:\n            os.unlink(apath(filename, r=request))\n            session.flash = T(\'file "%(filename)s" deleted\',\n                              dict(filename=filename))\n        except Exception:\n            session.flash = T(\'unable to delete file "%(filename)s"\',\n                              dict(filename=filename))\n        redirect(URL(sender))\n    return dict(filename=filename, sender=sender)\n\ndef enable():\n    app = get_app()\n    filename = os.path.join(apath(app, r=request),\'DISABLED\')\n    if os.path.exists(filename):\n        os.unlink(filename)\n        return SPAN(T(\'Disable\'),_style=\'color:green\')\n    else:\n        open(filename,\'wb\').write(time.ctime())\n        return SPAN(T(\'Enable\'),_style=\'color:red\')\n\ndef peek():\n    """ Visualize object code """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    try:\n        data = safe_read(apath(filename, r=request)).replace(\'\\r\',\'\')\n    except IOError:\n        session.flash = T(\'file does not exist\')\n        redirect(URL(\'site\'))\n\n    extension = filename[filename.rfind(\'.\') + 1:].lower()\n\n    return dict(app=request.args[0],\n                filename=filename,\n                data=data,\n                extension=extension)\n\n\ndef test():\n    """ Execute controller tests """\n    app = get_app()\n    if len(request.args) > 1:\n        file = request.args[1]\n    else:\n        file = \'.*\\.py\'\n\n    controllers = listdir(apath(\'%s/controllers/\' % app, r=request), file + \'$\')\n\n    return dict(app=app, controllers=controllers)\n\ndef keepalive():\n    return \'\'\n\ndef search():\n    keywords=request.vars.keywords or \'\'\n    app = get_app()\n    def match(filename,keywords):\n        filename=os.path.join(apath(app, r=request),filename)\n        if keywords in read_file(filename,\'rb\'):\n            return True\n        return False\n    path = apath(request.args[0], r=request)\n    files1 = glob(os.path.join(path,\'*/*.py\'))\n    files2 = glob(os.path.join(path,\'*/*.html\'))\n    files3 = glob(os.path.join(path,\'*/*/*.html\'))\n    files=[x[len(path)+1:].replace(\'\\\\\',\'/\') for x in files1+files2+files3 if match(x,keywords)]\n    return response.json({\'files\':files})\n\ndef edit():\n    """ File edit handler """\n    # Load json only if it is ajax edited...\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    # Try to discover the file type\n    if filename[-3:] == \'.py\':\n        filetype = \'python\'\n    elif filename[-5:] == \'.html\':\n        filetype = \'html\'\n    elif filename[-5:] == \'.load\':\n        filetype = \'html\'\n    elif filename[-4:] == \'.css\':\n        filetype = \'css\'\n    elif filename[-3:] == \'.js\':\n        filetype = \'js\'\n    else:\n        filetype = \'html\'\n\n    # ## check if file is not there\n\n    path = apath(filename, r=request)\n\n    if (\'revert\' in request.vars) and os.path.exists(path + \'.bak\'):\n        try:\n            data = safe_read(path + \'.bak\')\n            data1 = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                 return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        safe_write(path, data)\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n        safe_write(path + \'.bak\', data1)\n        response.flash = T(\'file "%s" of %s restored\', (filename, saved_on))\n    else:\n        try:\n            data = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n\n        if request.vars.file_hash and request.vars.file_hash != file_hash:\n            session.flash = T(\'file changed on disk\')\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path + \'.1\', data)\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'file changed on disk\')),\n                                      \'redirect\': URL(\'resolve\',\n                                                      args=request.args)})\n            else:\n                redirect(URL(\'resolve\', args=request.args))\n        elif request.vars.data:\n            safe_write(path + \'.bak\', data)\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path, data)\n            file_hash = md5_hash(data)\n            saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n            response.flash = T(\'file saved on %s\', saved_on)\n\n    data_or_revert = (request.vars.data or request.vars.revert)\n\n    # Check compile errors\n    highlight = None\n    if filetype == \'python\' and request.vars.data:\n        import _ast\n        try:\n            code = request.vars.data.rstrip().replace(\'\\r\\n\',\'\\n\')+\'\\n\'\n            compile(code, path, "exec", _ast.PyCF_ONLY_AST)\n        except Exception, e:\n            start = sum([len(line)+1 for l, line\n                            in enumerate(request.vars.data.split("\\n"))\n                            if l < e.lineno-1])\n            if e.text and e.offset:\n                offset = e.offset - (len(e.text) - len(e.text.splitlines()[-1]))\n            else:\n                offset = 0\n            highlight = {\'start\': start, \'end\': start + offset + 1}\n            try:\n                ex_name = e.__class__.__name__\n            except:\n                ex_name = \'unknown exception!\'\n            response.flash = DIV(T(\'failed to compile file because:\'), BR(),\n                                 B(ex_name), T(\' at line %s\') % e.lineno,\n                                 offset and T(\' at char %s\') % offset or \'\',\n                                 PRE(str(e)))\n\n    if data_or_revert and request.args[1] == \'modules\':\n        # Lets try to reload the modules\n        try:\n            mopath = \'.\'.join(request.args[2:])[:-3]\n            exec \'import applications.%s.modules.%s\' % (request.args[0], mopath)\n            reload(sys.modules[\'applications.%s.modules.%s\'\n                    % (request.args[0], mopath)])\n        except Exception, e:\n            response.flash = DIV(T(\'failed to reload module because:\'),PRE(str(e)))\n\n    edit_controller = None\n    editviewlinks = None\n    view_link = None\n    if filetype == \'html\' and len(request.args) >= 3:\n        cfilename = os.path.join(request.args[0], \'controllers\',\n                                 request.args[2] + \'.py\')\n        if os.path.exists(apath(cfilename, r=request)):\n            edit_controller = URL(\'edit\', args=[cfilename])\n            view = request.args[3].replace(\'.html\',\'\')\n            view_link = URL(request.args[0],request.args[2],view)\n    elif filetype == \'python\' and request.args[1] == \'controllers\':\n        ## it\'s a controller file.\n        ## Create links to all of the associated view files.\n        app = get_app()\n        viewname = os.path.splitext(request.args[2])[0]\n        viewpath = os.path.join(app,\'views\',viewname)\n        aviewpath = apath(viewpath, r=request)\n        viewlist = []\n        if os.path.exists(aviewpath):\n            if os.path.isdir(aviewpath):\n                viewlist = glob(os.path.join(aviewpath,\'*.html\'))\n        elif os.path.exists(aviewpath+\'.html\'):\n            viewlist.append(aviewpath+\'.html\')\n        if len(viewlist):\n            editviewlinks = []\n            for v in viewlist:\n                vf = os.path.split(v)[-1]\n                vargs = "/".join([viewpath.replace(os.sep,"/"),vf])\n                editviewlinks.append(A(T(vf.split(".")[0]),\\\n                    _href=URL(\'edit\',args=[vargs])))\n\n    if len(request.args) > 2 and request.args[1] == \'controllers\':\n        controller = (request.args[2])[:-3]\n        functions = regex_expose.findall(data)\n    else:\n        (controller, functions) = (None, None)\n\n    if \'from_ajax\' in request.vars:\n        return response.json({\'file_hash\': file_hash, \'saved_on\': saved_on, \'functions\':functions, \'controller\': controller, \'application\': request.args[0], \'highlight\': highlight })\n    else:\n\n        editarea_preferences = {}\n        editarea_preferences[\'FONT_SIZE\'] = \'10\'\n        editarea_preferences[\'FULL_SCREEN\'] = \'false\'\n        editarea_preferences[\'ALLOW_TOGGLE\'] = \'true\'\n        editarea_preferences[\'REPLACE_TAB_BY_SPACES\'] = \'4\'\n        editarea_preferences[\'DISPLAY\'] = \'onload\'\n        for key in editarea_preferences:\n            if globals().has_key(key):\n                editarea_preferences[key]=globals()[key]\n        return dict(app=request.args[0],\n                    filename=filename,\n                    filetype=filetype,\n                    data=data,\n                    edit_controller=edit_controller,\n                    file_hash=file_hash,\n                    saved_on=saved_on,\n                    controller=controller,\n                    functions=functions,\n                    view_link=view_link,\n                    editarea_preferences=editarea_preferences,\n                    editviewlinks=editviewlinks)\n\ndef resolve():\n    """\n    """\n\n    filename = \'/\'.join(request.args)\n    # ## check if file is not there\n    path = apath(filename, r=request)\n    a = safe_read(path).split(\'\\n\')\n    try:\n        b = safe_read(path + \'.1\').split(\'\\n\')\n    except IOError:\n        session.flash = \'Other file, no longer there\'\n        redirect(URL(\'edit\', args=request.args))\n\n    d = difflib.ndiff(a, b)\n\n    def leading(line):\n        """  """\n\n        # TODO: we really need to comment this\n        z = \'\'\n        for (k, c) in enumerate(line):\n            if c == \' \':\n                z += \'&nbsp;\'\n            elif c == \' \\t\':\n                z += \'&nbsp;\'\n            elif k == 0 and c == \'?\':\n                pass\n            else:\n                break\n\n        return XML(z)\n\n    def getclass(item):\n        """ Determine item class """\n\n        if item[0] == \' \':\n            return \'normal\'\n        if item[0] == \'+\':\n            return \'plus\'\n        if item[0] == \'-\':\n            return \'minus\'\n\n    if request.vars:\n        c = \'\\n\'.join([item[2:].rstrip() for (i, item) in enumerate(d) if item[0] \\\n                           == \' \' or \'line%i\' % i in request.vars])\n        safe_write(path, c)\n        session.flash = \'files merged\'\n        redirect(URL(\'edit\', args=request.args))\n    else:\n        # Making the short circuit compatible with <= python2.4\n        gen_data = lambda index,item: not item[:1] in [\'+\',\'-\'] and "" \\\n                   or INPUT(_type=\'checkbox\',\n                            _name=\'line%i\' % index,\n                            value=item[0] == \'+\')\n\n        diff = TABLE(*[TR(TD(gen_data(i,item)),\n                          TD(item[0]),\n                          TD(leading(item[2:]),\n                          TT(item[2:].rstrip())), _class=getclass(item))\n                       for (i, item) in enumerate(d) if item[0] != \'?\'])\n\n    return dict(diff=diff, filename=filename)\n\n\ndef edit_language():\n    """ Edit language file """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    from gluon.languages import read_dict, write_dict\n    strings = read_dict(apath(filename, r=request))\n    keys = sorted(strings.keys(),lambda x,y: cmp(x.lower(), y.lower()))\n    rows = []\n    rows.append(H2(T(\'Original/Translation\')))\n\n    for key in keys:\n        name = md5_hash(key)\n        if key==strings[key]:\n            _class=\'untranslated\'\n        else:\n            _class=\'translated\'\n        if len(key) <= 40:\n            elem = INPUT(_type=\'text\', _name=name,value=strings[key],\n                         _size=70,_class=_class)\n        else:\n            elem = TEXTAREA(_name=name, value=strings[key], _cols=70,\n                            _rows=5, _class=_class)\n\n        # Making the short circuit compatible with <= python2.4\n        k = (strings[key] != key) and key or B(key)\n\n        rows.append(P(k, BR(), elem, TAG.BUTTON(T(\'delete\'),\n                            _onclick=\'return delkey("%s")\' % name), _id=name))\n\n    rows.append(INPUT(_type=\'submit\', _value=T(\'update\')))\n    form = FORM(*rows)\n    if form.accepts(request.vars, keepvalues=True):\n        strs = dict()\n        for key in keys:\n            name = md5_hash(key)\n            if form.vars[name]==chr(127): continue\n            strs[key] = form.vars[name]\n        write_dict(apath(filename, r=request), strs)\n        session.flash = T(\'file saved on %(time)s\', dict(time=time.ctime()))\n        redirect(URL(r=request,args=request.args))\n    return dict(app=request.args[0], filename=filename, form=form)\n\n\ndef about():\n    """ Read about info """\n    app = get_app()\n    # ## check if file is not there\n    about = safe_read(apath(\'%s/ABOUT\' % app, r=request))\n    license = safe_read(apath(\'%s/LICENSE\' % app, r=request))\n    return dict(app=app, about=MARKMIN(about), license=MARKMIN(license))\n\n\ndef design():\n    """ Application design handler """\n    app = get_app()\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    if request.vars.pluginfile!=None and not isinstance(request.vars.pluginfile,str):\n        filename=os.path.basename(request.vars.pluginfile.filename)\n        if plugin_install(app, request.vars.pluginfile.file,\n                          request, filename):\n            session.flash = T(\'new plugin installed\')\n            redirect(URL(\'design\',args=app))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s"\', request.vars.filename)\n        redirect(URL(r=request))\n    elif isinstance(request.vars.pluginfile,str):\n        session.flash = T(\'plugin not specified\')\n        redirect(URL(r=request))\n\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+(\\.\\w+)+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views if not x.endswith(\'.bak\')]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    cronfolder = apath(\'%s/cron\' % app, r=request)\n    if not os.path.exists(cronfolder): os.mkdir(cronfolder)\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    plugins=[]\n    def filter_plugins(items,plugins):\n        plugins+=[item[7:].split(\'/\')[0].split(\'.\')[0] for item in items if item.startswith(\'plugin_\')]\n        plugins[:]=list(set(plugins))\n        plugins.sort()\n        return [item for item in items if not item.startswith(\'plugin_\')]\n\n    return dict(app=app,\n                models=filter_plugins(models,plugins),\n                defines=defines,\n                controllers=filter_plugins(controllers,plugins),\n                functions=functions,\n                views=filter_plugins(views,plugins),\n                modules=filter_plugins(modules,plugins),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics,plugins),\n                languages=languages,\n                crontab=crontab,\n                plugins=plugins)\n\ndef delete_plugin():\n    """ Object delete handler """\n    app=request.args(0)\n    plugin = request.args(1)\n    plugin_name=\'plugin_\'+plugin\n    if \'nodelete\' in request.vars:\n        redirect(URL(\'design\',args=app))\n    elif \'delete\' in request.vars:\n        try:\n            for folder in [\'models\',\'views\',\'controllers\',\'static\',\'modules\']:\n                path=os.path.join(apath(app,r=request),folder)\n                for item in os.listdir(path):\n                    if item.rsplit(\'.\',1)[0] == plugin_name:\n                        filename=os.path.join(path,item)\n                        if os.path.isdir(filename):\n                            shutil.rmtree(filename)\n                        else:\n                            os.unlink(filename)\n            session.flash = T(\'plugin "%(plugin)s" deleted\',\n                              dict(plugin=plugin))\n        except Exception:\n            session.flash = T(\'unable to delete file plugin "%(plugin)s"\',\n                              dict(plugin=plugin))\n        redirect(URL(\'design\',args=request.args(0)))\n    return dict(plugin=plugin)\n\ndef plugin():\n    """ Application design handler """\n    app = get_app()\n    plugin = request.args(1)\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+\\.\\w+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    def filter_plugins(items):\n        regex=re.compile(\'^plugin_\'+plugin+\'(/.*|\\..*)?$\')\n        return [item for item in items if regex.match(item)]\n\n    return dict(app=app,\n                models=filter_plugins(models),\n                defines=defines,\n                controllers=filter_plugins(controllers),\n                functions=functions,\n                views=filter_plugins(views),\n                modules=filter_plugins(modules),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics),\n                languages=languages,\n                crontab=crontab)\n\n\ndef create_file():\n    """ Create files handler """\n    try:\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n        filename = re.sub(\'[^\\w./-]+\', \'_\', request.vars.filename)\n\n        if path[-11:] == \'/languages/\':\n            # Handle language files\n            if len(filename) == 0:\n                raise SyntaxError\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n            app = path.split(\'/\')[-3]\n            path=os.path.join(apath(app, r=request),\'languages\',filename)\n            if not os.path.exists(path):\n                safe_write(path, \'\')\n            findT(apath(app, r=request), filename[:-3])\n            session.flash = T(\'language file "%(filename)s" created/updated\',\n                              dict(filename=filename))\n            redirect(request.vars.sender)\n\n        elif path[-8:] == \'/models/\':\n            # Handle python models\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n\'\n\n        elif path[-13:] == \'/controllers/\':\n            # Handle python controllers\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n# %s\\ndef index(): return dict(message="hello from %s")\'\n            text = text % (T(\'try something like\'), filename)\n\n        elif path[-7:] == \'/views/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle template (html) views\n            if filename.find(\'.\')<0:\n                filename += \'.html\'\n            extension = filename.split(\'.\')[-1].lower()\n\n            if len(filename) == 5:\n                raise SyntaxError\n\n            msg = T(\'This is the %(filename)s template\',\n                    dict(filename=filename))\n            if extension == \'html\':\n                text = dedent("""\n                   {{extend \'layout.html\'}}\n                   <h1>%s</h1>\n                   {{=BEAUTIFY(response._vars)}}""" % msg)\n            else:\n                generic = os.path.join(path,\'generic.\'+extension)\n                if os.path.exists(generic):\n                    text = read_file(generic)\n                else:\n                    text = \'\'\n\n        elif path[-9:] == \'/modules/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle python module files\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = dedent("""\n                   #!/usr/bin/env python\n                   # coding: utf8\n                   from gluon import *\\n""")\n\n        elif path[-8:] == \'/static/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            text = \'\'\n        else:\n            redirect(request.vars.sender)\n\n        full_filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(full_filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        if os.path.exists(full_filename):\n            raise SyntaxError\n\n        safe_write(full_filename, text)\n        session.flash = T(\'file "%(filename)s" created\',\n                          dict(filename=full_filename[len(path):]))\n        redirect(URL(\'edit\',\n                 args=[os.path.join(request.vars.location, filename)]))\n    except Exception, e:\n        if not isinstance(e,HTTP):\n            session.flash = T(\'cannot create file\')\n\n    redirect(request.vars.sender)\n\n\ndef upload_file():\n    """ File uploading handler """\n\n    try:\n        filename = None\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n\n        if request.vars.filename:\n            filename = re.sub(\'[^\\w\\./]+\', \'_\', request.vars.filename)\n        else:\n            filename = os.path.split(request.vars.file.filename)[-1]\n\n        if path[-8:] == \'/models/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-9:] == \'/modules/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-13:] == \'/controllers/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-7:] == \'/views/\' and not filename[-5:] == \'.html\':\n            filename += \'.html\'\n\n        if path[-11:] == \'/languages/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        safe_write(filename, request.vars.file.file.read(), \'wb\')\n        session.flash = T(\'file "%(filename)s" uploaded\',\n                          dict(filename=filename[len(path):]))\n    except Exception:\n        if filename:\n            d = dict(filename = filename[len(path):])\n        else:\n            d = dict(filename = \'unkown\')\n        session.flash = T(\'cannot upload file "%(filename)s"\', d)\n\n    redirect(request.vars.sender)\n\n\ndef errors():\n    """ Error handler """\n    import operator\n    import os\n    import pickle\n    import hashlib\n\n    app = get_app()\n\n    method = request.args(1) or \'new\'\n\n\n    if method == \'new\':\n        errors_path = apath(\'%s/errors\' % app, r=request)\n\n        delete_hashes = []\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                delete_hashes.append(item[7:])\n\n        hash2error = dict()\n\n        for fn in listdir(errors_path, \'^\\w.*\'):\n            fullpath = os.path.join(errors_path, fn)\n            if not os.path.isfile(fullpath): continue\n            try:\n                fullpath_file = open(fullpath, \'r\')\n                try:\n                    error = pickle.load(fullpath_file)\n                finally:\n                    fullpath_file.close()\n            except IOError:\n                continue\n\n            hash = hashlib.md5(error[\'traceback\']).hexdigest()\n\n            if hash in delete_hashes:\n                os.unlink(fullpath)\n            else:\n                try:\n                    hash2error[hash][\'count\'] += 1\n                except KeyError:\n                    error_lines = error[\'traceback\'].split("\\n")\n                    last_line = error_lines[-2]\n                    error_causer = os.path.split(error[\'layer\'])[1]\n                    hash2error[hash] = dict(count=1, pickel=error,\n                                            causer=error_causer,\n                                            last_line=last_line,\n                                            hash=hash,ticket=fn)\n\n        decorated = [(x[\'count\'], x) for x in hash2error.values()]\n        decorated.sort(key=operator.itemgetter(0), reverse=True)\n\n        return dict(errors = [x[1] for x in decorated], app=app, method=method)\n\n    elif method == \'dbnew\':\n        errors_path = apath(\'%s/errors\' % app, r=request)\n        tk_db, tk_table = get_ticket_storage(app)\n\n        delete_hashes = []\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                delete_hashes.append(item[7:])\n\n        hash2error = dict()\n\n        for fn in tk_db(tk_table.id>0).select():\n            try:\n                error = pickle.loads(fn.ticket_data)\n            except AttributeError:\n                tk_db(tk_table.id == fn.id).delete()\n                tk_db.commit()\n\n            hash = hashlib.md5(error[\'traceback\']).hexdigest()\n\n            if hash in delete_hashes:\n                tk_db(tk_table.id == fn.id).delete()\n                tk_db.commit()\n            else:\n                try:\n                    hash2error[\'hash\'][\'count\'] += 1\n                except KeyError:\n                    error_lines = error[\'traceback\'].split("\\n")\n                    last_line = error_lines[-2]\n                    error_causer = os.path.split(error[\'layer\'])[1]\n                    hash2error[hash] = dict(count=1, pickel=error,\n                                            causer=error_causer,\n                                            last_line=last_line,\n                                            hash=hash,ticket=fn.ticket_id)\n\n        decorated = [(x[\'count\'], x) for x in hash2error.values()]\n\n        decorated.sort(key=operator.itemgetter(0), reverse=True)\n\n        return dict(errors = [x[1] for x in decorated], app=app, method=method)\n\n    elif method == \'dbold\':\n        tk_db, tk_table = get_ticket_storage(app)\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                tk_db(tk_table.ticket_id == item[7:]).delete()\n                tk_db.commit()\n        tickets_ = tk_db(tk_table.id>0).select(tk_table.ticket_id, tk_table.created_datetime, orderby=~tk_table.created_datetime)\n        tickets = [row.ticket_id for row in tickets_]\n        times = dict([(row.ticket_id, row.created_datetime) for row in tickets_])\n\n        return dict(app=app, tickets=tickets, method=method, times=times)\n\n    else:\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                os.unlink(apath(\'%s/errors/%s\' % (app, item[7:]), r=request))\n        func = lambda p: os.stat(apath(\'%s/errors/%s\' % \\\n                                           (app, p), r=request)).st_mtime\n        tickets = sorted(listdir(apath(\'%s/errors/\' % app, r=request), \'^\\w.*\'),\n                         key=func,\n                         reverse=True)\n\n        return dict(app=app, tickets=tickets, method=method)\n\ndef get_ticket_storage(app):\n    private_folder = apath(\'%s/private\' % app, r=request)\n    try:\n        db_string = open(os.path.join(private_folder, \'ticket_storage.txt\')).read().replace(\'\\r\',\'\').replace(\'\\n\',\'\').strip()\n    except IOError:\n        raise Exception, "No ticket_storage.txt found in /private folder"\n    tickets_table = \'web2py_ticket\'\n    tablename = tickets_table + \'_\' + app\n    db_path = apath(\'%s/databases\' % app, r=request)\n    from gluon import DAL\n    ticketsdb = DAL(db_string, folder=db_path, auto_import=True)\n    if not ticketsdb.get(tablename):\n        table = ticketsdb.define_table(\n                tablename,\n                Field(\'ticket_id\', length=100),\n                Field(\'ticket_data\', \'text\'),\n                Field(\'created_datetime\', \'datetime\'),\n                )\n    return ticketsdb , ticketsdb.get(tablename)\n\ndef make_link(path):\n    """ Create a link from a path """\n    tryFile = path.replace(\'\\\\\', \'/\')\n\n    if os.path.isabs(tryFile) and os.path.isfile(tryFile):\n        (folder, filename) = os.path.split(tryFile)\n        (base, ext) = os.path.splitext(filename)\n        app = get_app()\n\n        editable = {\'controllers\': \'.py\', \'models\': \'.py\', \'views\': \'.html\'}\n        for key in editable.keys():\n            check_extension = folder.endswith("%s/%s" % (app,key))\n            if ext.lower() == editable[key] and check_extension:\n                return A(\'"\' + tryFile + \'"\',\n                         _href=URL(r=request,\n                         f=\'edit/%s/%s/%s\' % (app, key, filename))).xml()\n    return \'\'\n\n\ndef make_links(traceback):\n    """ Make links using the given traceback """\n\n    lwords = traceback.split(\'"\')\n\n    # Making the short circuit compatible with <= python2.4\n    result = (len(lwords) != 0) and lwords[0] or \'\'\n\n    i = 1\n\n    while i < len(lwords):\n        link = make_link(lwords[i])\n\n        if link == \'\':\n            result += \'"\' + lwords[i]\n        else:\n            result += link\n\n            if i + 1 < len(lwords):\n                result += lwords[i + 1]\n                i = i + 1\n\n        i = i + 1\n\n    return result\n\n\nclass TRACEBACK(object):\n    """ Generate the traceback """\n\n    def __init__(self, text):\n        """ TRACEBACK constructor """\n\n        self.s = make_links(CODE(text).xml())\n\n    def xml(self):\n        """ Returns the xml """\n\n        return self.s\n\n\ndef ticket():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(\'site\'))\n\n    app = get_app()\n    myversion = request.env.web2py_version\n    ticket = request.args[1]\n    e = RestrictedError()\n    e.load(request, app, ticket)\n\n    return dict(app=app,\n                ticket=ticket,\n                output=e.output,\n                traceback=(e.traceback and TRACEBACK(e.traceback)),\n                snapshot=e.snapshot,\n                code=e.code,\n                layer=e.layer,\n                myversion=myversion)\n\ndef ticketdb():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(\'site\'))\n\n    app = get_app()\n    myversion = request.env.web2py_version\n    ticket = request.args[1]\n    e = RestrictedError()\n    request.tickets_db = get_ticket_storage(app)[0]\n    e.load(request, app, ticket)\n    response.view = \'default/ticket.html\'\n    return dict(app=app,\n                ticket=ticket,\n                output=e.output,\n                traceback=(e.traceback and TRACEBACK(e.traceback)),\n                snapshot=e.snapshot,\n                code=e.code,\n                layer=e.layer,\n                myversion=myversion)\n\ndef error():\n    """ Generate a ticket (for testing) """\n    raise RuntimeError(\'admin ticket generator at your service\')\n\ndef update_languages():\n    """ Update available languages """\n\n    app = get_app()\n    update_all_languages(apath(app, r=request))\n    session.flash = T(\'Language files (static strings) updated\')\n    redirect(URL(\'design\',args=app,anchor=\'languages\'))\n\ndef twitter():\n    session.forget()\n    session._unlock(response)\n    import gluon.tools\n    import gluon.contrib.simplejson as sj\n    try:\n        if TWITTER_HASH:\n            page = gluon.tools.fetch(\'http://twitter.com/%s?format=json\'%TWITTER_HASH)\n            return sj.loads(page)[\'#timeline\']\n        else:\n            return \'disabled\'\n    except Exception, e:\n        return DIV(T(\'Unable to download because:\'),BR(),str(e))\n\ndef user():\n    if MULTI_USER_MODE:\n        if not db(db.auth_user).count():\n            auth.settings.registration_requires_approval = False\n        return dict(form=auth())\n    else:\n        return dict(form=T("Disabled"))\n\ndef reload_routes():\n    """ Reload routes.py """\n    import gluon.rewrite\n    gluon.rewrite.load()\n    redirect(URL(\'site\'))\n\n\n\nresponse._vars=response._caller(check_version)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of exceptions.TypeError object>"
p13
sS'__setattr__'
p14
S"<method-wrapper '__setattr__' of exceptions.TypeError object>"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of exceptions.TypeError object>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of exceptions.TypeError object>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of exceptions.TypeError object>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of exceptions.TypeError object>'
p23
sS'args'
p24
S"('not all arguments converted during string formatting',)"
p25
sS'__reduce__'
p26
S'<built-in method __reduce__ of exceptions.TypeError object>'
p27
sS'__str__'
p28
S"<method-wrapper '__str__' of exceptions.TypeError object>"
p29
sS'__format__'
p30
S'<built-in method __format__ of exceptions.TypeError object>'
p31
sS'__getattribute__'
p32
S"<method-wrapper '__getattribute__' of exceptions.TypeError object>"
p33
sS'__class__'
p34
S"<type 'exceptions.TypeError'>"
p35
sS'__unicode__'
p36
S'<built-in method __unicode__ of exceptions.TypeError object>'
p37
sS'__delattr__'
p38
S"<method-wrapper '__delattr__' of exceptions.TypeError object>"
p39
sS'__subclasshook__'
p40
S'<built-in method __subclasshook__ of type object>'
p41
sS'__repr__'
p42
S"<method-wrapper '__repr__' of exceptions.TypeError object>"
p43
sS'__dict__'
p44
S'{}'
p45
sS'__sizeof__'
p46
S'<built-in method __sizeof__ of exceptions.TypeError object>'
p47
sS'__doc__'
p48
S"'Inappropriate argument type.'"
p49
sS'__init__'
p50
S"<method-wrapper '__init__' of exceptions.TypeError object>"
p51
sS'__new__'
p52
S'<built-in method __new__ of type object>'
p53
ssS'evalue'
p54
S'not all arguments converted during string formatting'
p55
sS'request'
p56
ccopy_reg
_reconstructor
p57
(cgluon.html
BEAUTIFY
p58
c__builtin__
object
p59
NtRp60
(dp61
S'attributes'
p62
(dp63
sS'components'
p64
(lp65
g57
(cgluon.html
TABLE
p66
g59
NtRp67
(dp68
g62
(dp69
S'level'
p70
I5
ssS'parent'
p71
Nsg64
(lp72
g57
(cgluon.html
TR
p73
g59
NtRp74
(dp75
g62
(dp76
sg71
g67
sg64
(lp77
g57
(cgluon.html
TD
p78
g59
NtRp79
(dp80
g62
(dp81
S'_style'
p82
S'font-weight:bold;vertical-align:top'
p83
ssg71
g74
sg64
(lp84
S'ajax'
p85
asbag57
(g78
g59
NtRp86
(dp87
g62
(dp88
S'_valign'
p89
S'top'
p90
ssg71
g74
sg64
(lp91
S':'
asbag57
(g78
g59
NtRp92
(dp93
g62
(dp94
sg71
g74
sg64
(lp95
g57
(g58
g59
NtRp96
(dp97
g62
(dp98
g70
I5
ssg71
g92
sg64
(lp99
S'True'
p100
asbasbasbag57
(g73
g59
NtRp101
(dp102
g62
(dp103
sg71
g67
sg64
(lp104
g57
(g78
g59
NtRp105
(dp106
g62
(dp107
g82
g83
ssg71
g101
sg64
(lp108
S'application'
p109
asbag57
(g78
g59
NtRp110
(dp111
g62
(dp112
g89
g90
ssg71
g101
sg64
(lp113
S':'
asbag57
(g78
g59
NtRp114
(dp115
g62
(dp116
sg71
g101
sg64
(lp117
g57
(g58
g59
NtRp118
(dp119
g62
(dp120
g70
I5
ssg71
g114
sg64
(lp121
S'admin'
p122
asbasbasbag57
(g73
g59
NtRp123
(dp124
g62
(dp125
sg71
g67
sg64
(lp126
g57
(g78
g59
NtRp127
(dp128
g62
(dp129
g82
g83
ssg71
g123
sg64
(lp130
g24
asbag57
(g78
g59
NtRp131
(dp132
g62
(dp133
g89
g90
ssg71
g123
sg64
(lp134
S':'
asbag57
(g78
g59
NtRp135
(dp136
g62
(dp137
sg71
g123
sg64
(lp138
g57
(g58
g59
NtRp139
(dp140
g62
(dp141
g70
I5
ssg71
g135
sg64
(lp142
g57
(g66
g59
NtRp143
(dp144
g62
(dp145
g70
I4
ssg71
Nsg64
(lp146
sbasbasbasbag57
(g73
g59
NtRp147
(dp148
g62
(dp149
sg71
g67
sg64
(lp150
g57
(g78
g59
NtRp151
(dp152
g62
(dp153
g82
g83
ssg71
g147
sg64
(lp154
S'body'
p155
asbag57
(g78
g59
NtRp156
(dp157
g62
(dp158
g89
g90
ssg71
g147
sg64
(lp159
S':'
asbag57
(g78
g59
NtRp160
(dp161
g62
(dp162
sg71
g147
sg64
(lp163
g57
(g58
g59
NtRp164
(dp165
g62
(dp166
g70
I5
ssg71
g160
sg64
(lp167
S"<open file '<fdopen>', mode 'w+b' at 0x1019aea50>"
p168
asbasbasbag57
(g73
g59
NtRp169
(dp170
g62
(dp171
sg71
g67
sg64
(lp172
g57
(g78
g59
NtRp173
(dp174
g62
(dp175
g82
g83
ssg71
g169
sg64
(lp176
S'client'
p177
asbag57
(g78
g59
NtRp178
(dp179
g62
(dp180
g89
g90
ssg71
g169
sg64
(lp181
S':'
asbag57
(g78
g59
NtRp182
(dp183
g62
(dp184
sg71
g169
sg64
(lp185
g57
(g58
g59
NtRp186
(dp187
g62
(dp188
g70
I5
ssg71
g182
sg64
(lp189
S'127.0.0.1'
p190
asbasbasbag57
(g73
g59
NtRp191
(dp192
g62
(dp193
sg71
g67
sg64
(lp194
g57
(g78
g59
NtRp195
(dp196
g62
(dp197
g82
g83
ssg71
g191
sg64
(lp198
S'controller'
p199
asbag57
(g78
g59
NtRp200
(dp201
g62
(dp202
g89
g90
ssg71
g191
sg64
(lp203
S':'
asbag57
(g78
g59
NtRp204
(dp205
g62
(dp206
sg71
g191
sg64
(lp207
g57
(g58
g59
NtRp208
(dp209
g62
(dp210
g70
I5
ssg71
g204
sg64
(lp211
S'default'
p212
asbasbasbag57
(g73
g59
NtRp213
(dp214
g62
(dp215
sg71
g67
sg64
(lp216
g57
(g78
g59
NtRp217
(dp218
g62
(dp219
g82
g83
ssg71
g213
sg64
(lp220
S'cookies'
p221
asbag57
(g78
g59
NtRp222
(dp223
g62
(dp224
g89
g90
ssg71
g213
sg64
(lp225
S':'
asbag57
(g78
g59
NtRp226
(dp227
g62
(dp228
sg71
g213
sg64
(lp229
g57
(g58
g59
NtRp230
(dp231
g62
(dp232
g70
I5
ssg71
g226
sg64
(lp233
g57
(g66
g59
NtRp234
(dp235
g62
(dp236
g70
I4
ssg71
Nsg64
(lp237
g57
(g73
g59
NtRp238
(dp239
g62
(dp240
sg71
g234
sg64
(lp241
g57
(g78
g59
NtRp242
(dp243
g62
(dp244
g82
g83
ssg71
g238
sg64
(lp245
S'session_id_admin'
p246
asbag57
(g78
g59
NtRp247
(dp248
g62
(dp249
g89
g90
ssg71
g238
sg64
(lp250
S':'
asbag57
(g78
g59
NtRp251
(dp252
g62
(dp253
sg71
g238
sg64
(lp254
g57
(g58
g59
NtRp255
(dp256
g62
(dp257
g70
I4
ssg71
g251
sg64
(lp258
g57
(g66
g59
NtRp259
(dp260
g62
(dp261
g70
I3
ssg71
Nsg64
(lp262
g57
(g73
g59
NtRp263
(dp264
g62
(dp265
sg71
g259
sg64
(lp266
g57
(g78
g59
NtRp267
(dp268
g62
(dp269
g82
g83
ssg71
g263
sg64
(lp270
S'comment'
p271
asbag57
(g78
g59
NtRp272
(dp273
g62
(dp274
g89
g90
ssg71
g263
sg64
(lp275
S':'
asbag57
(g78
g59
NtRp276
(dp277
g62
(dp278
sg71
g263
sg64
(lp279
g57
(g58
g59
NtRp280
(dp281
g62
(dp282
g70
I3
ssg71
g276
sg64
(lp283
S''
asbasbasbag57
(g73
g59
NtRp284
(dp285
g62
(dp286
sg71
g259
sg64
(lp287
g57
(g78
g59
NtRp288
(dp289
g62
(dp290
g82
g83
ssg71
g284
sg64
(lp291
S'domain'
p292
asbag57
(g78
g59
NtRp293
(dp294
g62
(dp295
g89
g90
ssg71
g284
sg64
(lp296
S':'
asbag57
(g78
g59
NtRp297
(dp298
g62
(dp299
sg71
g284
sg64
(lp300
g57
(g58
g59
NtRp301
(dp302
g62
(dp303
g70
I3
ssg71
g297
sg64
(lp304
S''
asbasbasbag57
(g73
g59
NtRp305
(dp306
g62
(dp307
sg71
g259
sg64
(lp308
g57
(g78
g59
NtRp309
(dp310
g62
(dp311
g82
g83
ssg71
g305
sg64
(lp312
S'expires'
p313
asbag57
(g78
g59
NtRp314
(dp315
g62
(dp316
g89
g90
ssg71
g305
sg64
(lp317
S':'
asbag57
(g78
g59
NtRp318
(dp319
g62
(dp320
sg71
g305
sg64
(lp321
g57
(g58
g59
NtRp322
(dp323
g62
(dp324
g70
I3
ssg71
g318
sg64
(lp325
S''
asbasbasbag57
(g73
g59
NtRp326
(dp327
g62
(dp328
sg71
g259
sg64
(lp329
g57
(g78
g59
NtRp330
(dp331
g62
(dp332
g82
g83
ssg71
g326
sg64
(lp333
S'httponly'
p334
asbag57
(g78
g59
NtRp335
(dp336
g62
(dp337
g89
g90
ssg71
g326
sg64
(lp338
S':'
asbag57
(g78
g59
NtRp339
(dp340
g62
(dp341
sg71
g326
sg64
(lp342
g57
(g58
g59
NtRp343
(dp344
g62
(dp345
g70
I3
ssg71
g339
sg64
(lp346
S''
asbasbasbag57
(g73
g59
NtRp347
(dp348
g62
(dp349
sg71
g259
sg64
(lp350
g57
(g78
g59
NtRp351
(dp352
g62
(dp353
g82
g83
ssg71
g347
sg64
(lp354
S'max-age'
p355
asbag57
(g78
g59
NtRp356
(dp357
g62
(dp358
g89
g90
ssg71
g347
sg64
(lp359
S':'
asbag57
(g78
g59
NtRp360
(dp361
g62
(dp362
sg71
g347
sg64
(lp363
g57
(g58
g59
NtRp364
(dp365
g62
(dp366
g70
I3
ssg71
g360
sg64
(lp367
S''
asbasbasbag57
(g73
g59
NtRp368
(dp369
g62
(dp370
sg71
g259
sg64
(lp371
g57
(g78
g59
NtRp372
(dp373
g62
(dp374
g82
g83
ssg71
g368
sg64
(lp375
S'path'
p376
asbag57
(g78
g59
NtRp377
(dp378
g62
(dp379
g89
g90
ssg71
g368
sg64
(lp380
S':'
asbag57
(g78
g59
NtRp381
(dp382
g62
(dp383
sg71
g368
sg64
(lp384
g57
(g58
g59
NtRp385
(dp386
g62
(dp387
g70
I3
ssg71
g381
sg64
(lp388
S''
asbasbasbag57
(g73
g59
NtRp389
(dp390
g62
(dp391
sg71
g259
sg64
(lp392
g57
(g78
g59
NtRp393
(dp394
g62
(dp395
g82
g83
ssg71
g389
sg64
(lp396
S'secure'
p397
asbag57
(g78
g59
NtRp398
(dp399
g62
(dp400
g89
g90
ssg71
g389
sg64
(lp401
S':'
asbag57
(g78
g59
NtRp402
(dp403
g62
(dp404
sg71
g389
sg64
(lp405
g57
(g58
g59
NtRp406
(dp407
g62
(dp408
g70
I3
ssg71
g402
sg64
(lp409
S''
asbasbasbag57
(g73
g59
NtRp410
(dp411
g62
(dp412
sg71
g259
sg64
(lp413
g57
(g78
g59
NtRp414
(dp415
g62
(dp416
g82
g83
ssg71
g410
sg64
(lp417
S'version'
p418
asbag57
(g78
g59
NtRp419
(dp420
g62
(dp421
g89
g90
ssg71
g410
sg64
(lp422
S':'
asbag57
(g78
g59
NtRp423
(dp424
g62
(dp425
sg71
g410
sg64
(lp426
g57
(g58
g59
NtRp427
(dp428
g62
(dp429
g70
I3
ssg71
g423
sg64
(lp430
S''
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp431
(dp432
g62
(dp433
sg71
g67
sg64
(lp434
g57
(g78
g59
NtRp435
(dp436
g62
(dp437
g82
g83
ssg71
g431
sg64
(lp438
S'env'
p439
asbag57
(g78
g59
NtRp440
(dp441
g62
(dp442
g89
g90
ssg71
g431
sg64
(lp443
S':'
asbag57
(g78
g59
NtRp444
(dp445
g62
(dp446
sg71
g431
sg64
(lp447
g57
(g58
g59
NtRp448
(dp449
g62
(dp450
g70
I5
ssg71
g444
sg64
(lp451
g57
(g66
g59
NtRp452
(dp453
g62
(dp454
g70
I4
ssg71
Nsg64
(lp455
g57
(g73
g59
NtRp456
(dp457
g62
(dp458
sg71
g452
sg64
(lp459
g57
(g78
g59
NtRp460
(dp461
g62
(dp462
g82
g83
ssg71
g456
sg64
(lp463
S'app_folders'
p464
asbag57
(g78
g59
NtRp465
(dp466
g62
(dp467
g89
g90
ssg71
g456
sg64
(lp468
S':'
asbag57
(g78
g59
NtRp469
(dp470
g62
(dp471
sg71
g456
sg64
(lp472
g57
(g58
g59
NtRp473
(dp474
g62
(dp475
g70
I4
ssg71
g469
sg64
(lp476
S"set(['/Users/cyan/Package/GitHub/funback/web2py/applications/welcome/', '/Users/cyan/Package/GitHub/funback/web2py/applications/admin/'])"
p477
asbasbasbag57
(g73
g59
NtRp478
(dp479
g62
(dp480
sg71
g452
sg64
(lp481
g57
(g78
g59
NtRp482
(dp483
g62
(dp484
g82
g83
ssg71
g478
sg64
(lp485
S'applications_parent'
p486
asbag57
(g78
g59
NtRp487
(dp488
g62
(dp489
g89
g90
ssg71
g478
sg64
(lp490
S':'
asbag57
(g78
g59
NtRp491
(dp492
g62
(dp493
sg71
g478
sg64
(lp494
g57
(g58
g59
NtRp495
(dp496
g62
(dp497
g70
I4
ssg71
g491
sg64
(lp498
S'/Users/cyan/Package/GitHub/funback/web2py'
p499
asbasbasbag57
(g73
g59
NtRp500
(dp501
g62
(dp502
sg71
g452
sg64
(lp503
g57
(g78
g59
NtRp504
(dp505
g62
(dp506
g82
g83
ssg71
g500
sg64
(lp507
S'cmd_args'
p508
asbag57
(g78
g59
NtRp509
(dp510
g62
(dp511
g89
g90
ssg71
g500
sg64
(lp512
S':'
asbag57
(g78
g59
NtRp513
(dp514
g62
(dp515
sg71
g500
sg64
(lp516
g57
(g58
g59
NtRp517
(dp518
g62
(dp519
g70
I4
ssg71
g513
sg64
(lp520
g57
(g66
g59
NtRp521
(dp522
g62
(dp523
g70
I3
ssg71
Nsg64
(lp524
sbasbasbasbag57
(g73
g59
NtRp525
(dp526
g62
(dp527
sg71
g452
sg64
(lp528
g57
(g78
g59
NtRp529
(dp530
g62
(dp531
g82
g83
ssg71
g525
sg64
(lp532
S'cmd_options'
p533
asbag57
(g78
g59
NtRp534
(dp535
g62
(dp536
g89
g90
ssg71
g525
sg64
(lp537
S':'
asbag57
(g78
g59
NtRp538
(dp539
g62
(dp540
sg71
g525
sg64
(lp541
g57
(g58
g59
NtRp542
(dp543
g62
(dp544
g70
I4
ssg71
g538
sg64
(lp545
S"<Values at 0x1018ad4d0: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'cyan-1.local', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': '/Users/cyan/Package/GitHub/funback/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'socket_timeout': 1, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p546
asbasbasbag57
(g73
g59
NtRp547
(dp548
g62
(dp549
sg71
g452
sg64
(lp550
g57
(g78
g59
NtRp551
(dp552
g62
(dp553
g82
g83
ssg71
g547
sg64
(lp554
S'content_length'
p555
asbag57
(g78
g59
NtRp556
(dp557
g62
(dp558
g89
g90
ssg71
g547
sg64
(lp559
S':'
asbag57
(g78
g59
NtRp560
(dp561
g62
(dp562
sg71
g547
sg64
(lp563
g57
(g58
g59
NtRp564
(dp565
g62
(dp566
g70
I4
ssg71
g560
sg64
(lp567
S'0'
asbasbasbag57
(g73
g59
NtRp568
(dp569
g62
(dp570
sg71
g452
sg64
(lp571
g57
(g78
g59
NtRp572
(dp573
g62
(dp574
g82
g83
ssg71
g568
sg64
(lp575
S'db_sessions'
p576
asbag57
(g78
g59
NtRp577
(dp578
g62
(dp579
g89
g90
ssg71
g568
sg64
(lp580
S':'
asbag57
(g78
g59
NtRp581
(dp582
g62
(dp583
sg71
g568
sg64
(lp584
g57
(g58
g59
NtRp585
(dp586
g62
(dp587
g70
I4
ssg71
g581
sg64
(lp588
S'set([])'
p589
asbasbasbag57
(g73
g59
NtRp590
(dp591
g62
(dp592
sg71
g452
sg64
(lp593
g57
(g78
g59
NtRp594
(dp595
g62
(dp596
g82
g83
ssg71
g590
sg64
(lp597
S'debugging'
p598
asbag57
(g78
g59
NtRp599
(dp600
g62
(dp601
g89
g90
ssg71
g590
sg64
(lp602
S':'
asbag57
(g78
g59
NtRp603
(dp604
g62
(dp605
sg71
g590
sg64
(lp606
g57
(g58
g59
NtRp607
(dp608
g62
(dp609
g70
I4
ssg71
g603
sg64
(lp610
S'False'
p611
asbasbasbag57
(g73
g59
NtRp612
(dp613
g62
(dp614
sg71
g452
sg64
(lp615
g57
(g78
g59
NtRp616
(dp617
g62
(dp618
g82
g83
ssg71
g612
sg64
(lp619
S'gluon_parent'
p620
asbag57
(g78
g59
NtRp621
(dp622
g62
(dp623
g89
g90
ssg71
g612
sg64
(lp624
S':'
asbag57
(g78
g59
NtRp625
(dp626
g62
(dp627
sg71
g612
sg64
(lp628
g57
(g58
g59
NtRp629
(dp630
g62
(dp631
g70
I4
ssg71
g625
sg64
(lp632
S'/Users/cyan/Package/GitHub/funback/web2py'
p633
asbasbasbag57
(g73
g59
NtRp634
(dp635
g62
(dp636
sg71
g452
sg64
(lp637
g57
(g78
g59
NtRp638
(dp639
g62
(dp640
g82
g83
ssg71
g634
sg64
(lp641
S'http_accept'
p642
asbag57
(g78
g59
NtRp643
(dp644
g62
(dp645
g89
g90
ssg71
g634
sg64
(lp646
S':'
asbag57
(g78
g59
NtRp647
(dp648
g62
(dp649
sg71
g634
sg64
(lp650
g57
(g58
g59
NtRp651
(dp652
g62
(dp653
g70
I4
ssg71
g647
sg64
(lp654
S'*/*'
p655
asbasbasbag57
(g73
g59
NtRp656
(dp657
g62
(dp658
sg71
g452
sg64
(lp659
g57
(g78
g59
NtRp660
(dp661
g62
(dp662
g82
g83
ssg71
g656
sg64
(lp663
S'http_accept_encoding'
p664
asbag57
(g78
g59
NtRp665
(dp666
g62
(dp667
g89
g90
ssg71
g656
sg64
(lp668
S':'
asbag57
(g78
g59
NtRp669
(dp670
g62
(dp671
sg71
g656
sg64
(lp672
g57
(g58
g59
NtRp673
(dp674
g62
(dp675
g70
I4
ssg71
g669
sg64
(lp676
S'gzip, deflate'
p677
asbasbasbag57
(g73
g59
NtRp678
(dp679
g62
(dp680
sg71
g452
sg64
(lp681
g57
(g78
g59
NtRp682
(dp683
g62
(dp684
g82
g83
ssg71
g678
sg64
(lp685
S'http_accept_language'
p686
asbag57
(g78
g59
NtRp687
(dp688
g62
(dp689
g89
g90
ssg71
g678
sg64
(lp690
S':'
asbag57
(g78
g59
NtRp691
(dp692
g62
(dp693
sg71
g678
sg64
(lp694
g57
(g58
g59
NtRp695
(dp696
g62
(dp697
g70
I4
ssg71
g691
sg64
(lp698
S'en-us'
p699
asbasbasbag57
(g73
g59
NtRp700
(dp701
g62
(dp702
sg71
g452
sg64
(lp703
g57
(g78
g59
NtRp704
(dp705
g62
(dp706
g82
g83
ssg71
g700
sg64
(lp707
S'http_connection'
p708
asbag57
(g78
g59
NtRp709
(dp710
g62
(dp711
g89
g90
ssg71
g700
sg64
(lp712
S':'
asbag57
(g78
g59
NtRp713
(dp714
g62
(dp715
sg71
g700
sg64
(lp716
g57
(g58
g59
NtRp717
(dp718
g62
(dp719
g70
I4
ssg71
g713
sg64
(lp720
S'keep-alive'
p721
asbasbasbag57
(g73
g59
NtRp722
(dp723
g62
(dp724
sg71
g452
sg64
(lp725
g57
(g78
g59
NtRp726
(dp727
g62
(dp728
g82
g83
ssg71
g722
sg64
(lp729
S'http_content_length'
p730
asbag57
(g78
g59
NtRp731
(dp732
g62
(dp733
g89
g90
ssg71
g722
sg64
(lp734
S':'
asbag57
(g78
g59
NtRp735
(dp736
g62
(dp737
sg71
g722
sg64
(lp738
g57
(g58
g59
NtRp739
(dp740
g62
(dp741
g70
I4
ssg71
g735
sg64
(lp742
S'0'
asbasbasbag57
(g73
g59
NtRp743
(dp744
g62
(dp745
sg71
g452
sg64
(lp746
g57
(g78
g59
NtRp747
(dp748
g62
(dp749
g82
g83
ssg71
g743
sg64
(lp750
S'http_cookie'
p751
asbag57
(g78
g59
NtRp752
(dp753
g62
(dp754
g89
g90
ssg71
g743
sg64
(lp755
S':'
asbag57
(g78
g59
NtRp756
(dp757
g62
(dp758
sg71
g743
sg64
(lp759
g57
(g58
g59
NtRp760
(dp761
g62
(dp762
g70
I4
ssg71
g756
sg64
(lp763
S'session_id_admin=127.0.0.1-5fd3a0e2-ea14-4f81-bfb5-f5621ef8750e'
p764
asbasbasbag57
(g73
g59
NtRp765
(dp766
g62
(dp767
sg71
g452
sg64
(lp768
g57
(g78
g59
NtRp769
(dp770
g62
(dp771
g82
g83
ssg71
g765
sg64
(lp772
S'http_host'
p773
asbag57
(g78
g59
NtRp774
(dp775
g62
(dp776
g89
g90
ssg71
g765
sg64
(lp777
S':'
asbag57
(g78
g59
NtRp778
(dp779
g62
(dp780
sg71
g765
sg64
(lp781
g57
(g58
g59
NtRp782
(dp783
g62
(dp784
g70
I4
ssg71
g778
sg64
(lp785
S'127.0.0.1:8000'
p786
asbasbasbag57
(g73
g59
NtRp787
(dp788
g62
(dp789
sg71
g452
sg64
(lp790
g57
(g78
g59
NtRp791
(dp792
g62
(dp793
g82
g83
ssg71
g787
sg64
(lp794
S'http_origin'
p795
asbag57
(g78
g59
NtRp796
(dp797
g62
(dp798
g89
g90
ssg71
g787
sg64
(lp799
S':'
asbag57
(g78
g59
NtRp800
(dp801
g62
(dp802
sg71
g787
sg64
(lp803
g57
(g58
g59
NtRp804
(dp805
g62
(dp806
g70
I4
ssg71
g800
sg64
(lp807
S'http://127.0.0.1:8000'
p808
asbasbasbag57
(g73
g59
NtRp809
(dp810
g62
(dp811
sg71
g452
sg64
(lp812
g57
(g78
g59
NtRp813
(dp814
g62
(dp815
g82
g83
ssg71
g809
sg64
(lp816
S'http_referer'
p817
asbag57
(g78
g59
NtRp818
(dp819
g62
(dp820
g89
g90
ssg71
g809
sg64
(lp821
S':'
asbag57
(g78
g59
NtRp822
(dp823
g62
(dp824
sg71
g809
sg64
(lp825
g57
(g58
g59
NtRp826
(dp827
g62
(dp828
g70
I4
ssg71
g822
sg64
(lp829
S'http://127.0.0.1:8000/admin/default/site'
p830
asbasbasbag57
(g73
g59
NtRp831
(dp832
g62
(dp833
sg71
g452
sg64
(lp834
g57
(g78
g59
NtRp835
(dp836
g62
(dp837
g82
g83
ssg71
g831
sg64
(lp838
S'http_user_agent'
p839
asbag57
(g78
g59
NtRp840
(dp841
g62
(dp842
g89
g90
ssg71
g831
sg64
(lp843
S':'
asbag57
(g78
g59
NtRp844
(dp845
g62
(dp846
sg71
g831
sg64
(lp847
g57
(g58
g59
NtRp848
(dp849
g62
(dp850
g70
I4
ssg71
g844
sg64
(lp851
S'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/534.52.7 (KHTML, like Gecko) Version/5.1.2 Safari/534.52.7'
p852
asbasbasbag57
(g73
g59
NtRp853
(dp854
g62
(dp855
sg71
g452
sg64
(lp856
g57
(g78
g59
NtRp857
(dp858
g62
(dp859
g82
g83
ssg71
g853
sg64
(lp860
S'http_x_requested_with'
p861
asbag57
(g78
g59
NtRp862
(dp863
g62
(dp864
g89
g90
ssg71
g853
sg64
(lp865
S':'
asbag57
(g78
g59
NtRp866
(dp867
g62
(dp868
sg71
g853
sg64
(lp869
g57
(g58
g59
NtRp870
(dp871
g62
(dp872
g70
I4
ssg71
g866
sg64
(lp873
S'XMLHttpRequest'
p874
asbasbasbag57
(g73
g59
NtRp875
(dp876
g62
(dp877
sg71
g452
sg64
(lp878
g57
(g78
g59
NtRp879
(dp880
g62
(dp881
g82
g83
ssg71
g875
sg64
(lp882
S'is_jython'
p883
asbag57
(g78
g59
NtRp884
(dp885
g62
(dp886
g89
g90
ssg71
g875
sg64
(lp887
S':'
asbag57
(g78
g59
NtRp888
(dp889
g62
(dp890
sg71
g875
sg64
(lp891
g57
(g58
g59
NtRp892
(dp893
g62
(dp894
g70
I4
ssg71
g888
sg64
(lp895
g611
asbasbasbag57
(g73
g59
NtRp896
(dp897
g62
(dp898
sg71
g452
sg64
(lp899
g57
(g78
g59
NtRp900
(dp901
g62
(dp902
g82
g83
ssg71
g896
sg64
(lp903
S'is_pypy'
p904
asbag57
(g78
g59
NtRp905
(dp906
g62
(dp907
g89
g90
ssg71
g896
sg64
(lp908
S':'
asbag57
(g78
g59
NtRp909
(dp910
g62
(dp911
sg71
g896
sg64
(lp912
g57
(g58
g59
NtRp913
(dp914
g62
(dp915
g70
I4
ssg71
g909
sg64
(lp916
g611
asbasbasbag57
(g73
g59
NtRp917
(dp918
g62
(dp919
sg71
g452
sg64
(lp920
g57
(g78
g59
NtRp921
(dp922
g62
(dp923
g82
g83
ssg71
g917
sg64
(lp924
S'path_info'
p925
asbag57
(g78
g59
NtRp926
(dp927
g62
(dp928
g89
g90
ssg71
g917
sg64
(lp929
S':'
asbag57
(g78
g59
NtRp930
(dp931
g62
(dp932
sg71
g917
sg64
(lp933
g57
(g58
g59
NtRp934
(dp935
g62
(dp936
g70
I4
ssg71
g930
sg64
(lp937
S'/admin/default/check_version'
p938
asbasbasbag57
(g73
g59
NtRp939
(dp940
g62
(dp941
sg71
g452
sg64
(lp942
g57
(g78
g59
NtRp943
(dp944
g62
(dp945
g82
g83
ssg71
g939
sg64
(lp946
S'query_string'
p947
asbag57
(g78
g59
NtRp948
(dp949
g62
(dp950
g89
g90
ssg71
g939
sg64
(lp951
S':'
asbag57
(g78
g59
NtRp952
(dp953
g62
(dp954
sg71
g939
sg64
(lp955
g57
(g58
g59
NtRp956
(dp957
g62
(dp958
g70
I4
ssg71
g952
sg64
(lp959
S''
asbasbasbag57
(g73
g59
NtRp960
(dp961
g62
(dp962
sg71
g452
sg64
(lp963
g57
(g78
g59
NtRp964
(dp965
g62
(dp966
g82
g83
ssg71
g960
sg64
(lp967
S'remote_addr'
p968
asbag57
(g78
g59
NtRp969
(dp970
g62
(dp971
g89
g90
ssg71
g960
sg64
(lp972
S':'
asbag57
(g78
g59
NtRp973
(dp974
g62
(dp975
sg71
g960
sg64
(lp976
g57
(g58
g59
NtRp977
(dp978
g62
(dp979
g70
I4
ssg71
g973
sg64
(lp980
g190
asbasbasbag57
(g73
g59
NtRp981
(dp982
g62
(dp983
sg71
g452
sg64
(lp984
g57
(g78
g59
NtRp985
(dp986
g62
(dp987
g82
g83
ssg71
g981
sg64
(lp988
S'remote_port'
p989
asbag57
(g78
g59
NtRp990
(dp991
g62
(dp992
g89
g90
ssg71
g981
sg64
(lp993
S':'
asbag57
(g78
g59
NtRp994
(dp995
g62
(dp996
sg71
g981
sg64
(lp997
g57
(g58
g59
NtRp998
(dp999
g62
(dp1000
g70
I4
ssg71
g994
sg64
(lp1001
S'60935'
p1002
asbasbasbag57
(g73
g59
NtRp1003
(dp1004
g62
(dp1005
sg71
g452
sg64
(lp1006
g57
(g78
g59
NtRp1007
(dp1008
g62
(dp1009
g82
g83
ssg71
g1003
sg64
(lp1010
S'request_method'
p1011
asbag57
(g78
g59
NtRp1012
(dp1013
g62
(dp1014
g89
g90
ssg71
g1003
sg64
(lp1015
S':'
asbag57
(g78
g59
NtRp1016
(dp1017
g62
(dp1018
sg71
g1003
sg64
(lp1019
g57
(g58
g59
NtRp1020
(dp1021
g62
(dp1022
g70
I4
ssg71
g1016
sg64
(lp1023
S'POST'
p1024
asbasbasbag57
(g73
g59
NtRp1025
(dp1026
g62
(dp1027
sg71
g452
sg64
(lp1028
g57
(g78
g59
NtRp1029
(dp1030
g62
(dp1031
g82
g83
ssg71
g1025
sg64
(lp1032
S'script_name'
p1033
asbag57
(g78
g59
NtRp1034
(dp1035
g62
(dp1036
g89
g90
ssg71
g1025
sg64
(lp1037
S':'
asbag57
(g78
g59
NtRp1038
(dp1039
g62
(dp1040
sg71
g1025
sg64
(lp1041
g57
(g58
g59
NtRp1042
(dp1043
g62
(dp1044
g70
I4
ssg71
g1038
sg64
(lp1045
S''
asbasbasbag57
(g73
g59
NtRp1046
(dp1047
g62
(dp1048
sg71
g452
sg64
(lp1049
g57
(g78
g59
NtRp1050
(dp1051
g62
(dp1052
g82
g83
ssg71
g1046
sg64
(lp1053
S'server_name'
p1054
asbag57
(g78
g59
NtRp1055
(dp1056
g62
(dp1057
g89
g90
ssg71
g1046
sg64
(lp1058
S':'
asbag57
(g78
g59
NtRp1059
(dp1060
g62
(dp1061
sg71
g1046
sg64
(lp1062
g57
(g58
g59
NtRp1063
(dp1064
g62
(dp1065
g70
I4
ssg71
g1059
sg64
(lp1066
S'cyan-1.local'
p1067
asbasbasbag57
(g73
g59
NtRp1068
(dp1069
g62
(dp1070
sg71
g452
sg64
(lp1071
g57
(g78
g59
NtRp1072
(dp1073
g62
(dp1074
g82
g83
ssg71
g1068
sg64
(lp1075
S'server_port'
p1076
asbag57
(g78
g59
NtRp1077
(dp1078
g62
(dp1079
g89
g90
ssg71
g1068
sg64
(lp1080
S':'
asbag57
(g78
g59
NtRp1081
(dp1082
g62
(dp1083
sg71
g1068
sg64
(lp1084
g57
(g58
g59
NtRp1085
(dp1086
g62
(dp1087
g70
I4
ssg71
g1081
sg64
(lp1088
S'8000'
p1089
asbasbasbag57
(g73
g59
NtRp1090
(dp1091
g62
(dp1092
sg71
g452
sg64
(lp1093
g57
(g78
g59
NtRp1094
(dp1095
g62
(dp1096
g82
g83
ssg71
g1090
sg64
(lp1097
S'server_protocol'
p1098
asbag57
(g78
g59
NtRp1099
(dp1100
g62
(dp1101
g89
g90
ssg71
g1090
sg64
(lp1102
S':'
asbag57
(g78
g59
NtRp1103
(dp1104
g62
(dp1105
sg71
g1090
sg64
(lp1106
g57
(g58
g59
NtRp1107
(dp1108
g62
(dp1109
g70
I4
ssg71
g1103
sg64
(lp1110
S'HTTP/1.1'
p1111
asbasbasbag57
(g73
g59
NtRp1112
(dp1113
g62
(dp1114
sg71
g452
sg64
(lp1115
g57
(g78
g59
NtRp1116
(dp1117
g62
(dp1118
g82
g83
ssg71
g1112
sg64
(lp1119
S'server_software'
p1120
asbag57
(g78
g59
NtRp1121
(dp1122
g62
(dp1123
g89
g90
ssg71
g1112
sg64
(lp1124
S':'
asbag57
(g78
g59
NtRp1125
(dp1126
g62
(dp1127
sg71
g1112
sg64
(lp1128
g57
(g58
g59
NtRp1129
(dp1130
g62
(dp1131
g70
I4
ssg71
g1125
sg64
(lp1132
S'Rocket 1.2.4'
p1133
asbasbasbag57
(g73
g59
NtRp1134
(dp1135
g62
(dp1136
sg71
g452
sg64
(lp1137
g57
(g78
g59
NtRp1138
(dp1139
g62
(dp1140
g82
g83
ssg71
g1134
sg64
(lp1141
S'web2py_crontype'
p1142
asbag57
(g78
g59
NtRp1143
(dp1144
g62
(dp1145
g89
g90
ssg71
g1134
sg64
(lp1146
S':'
asbag57
(g78
g59
NtRp1147
(dp1148
g62
(dp1149
sg71
g1134
sg64
(lp1150
g57
(g58
g59
NtRp1151
(dp1152
g62
(dp1153
g70
I4
ssg71
g1147
sg64
(lp1154
S'hard'
p1155
asbasbasbag57
(g73
g59
NtRp1156
(dp1157
g62
(dp1158
sg71
g452
sg64
(lp1159
g57
(g78
g59
NtRp1160
(dp1161
g62
(dp1162
g82
g83
ssg71
g1156
sg64
(lp1163
S'web2py_path'
p1164
asbag57
(g78
g59
NtRp1165
(dp1166
g62
(dp1167
g89
g90
ssg71
g1156
sg64
(lp1168
S':'
asbag57
(g78
g59
NtRp1169
(dp1170
g62
(dp1171
sg71
g1156
sg64
(lp1172
g57
(g58
g59
NtRp1173
(dp1174
g62
(dp1175
g70
I4
ssg71
g1169
sg64
(lp1176
g499
asbasbasbag57
(g73
g59
NtRp1177
(dp1178
g62
(dp1179
sg71
g452
sg64
(lp1180
g57
(g78
g59
NtRp1181
(dp1182
g62
(dp1183
g82
g83
ssg71
g1177
sg64
(lp1184
S'web2py_version'
p1185
asbag57
(g78
g59
NtRp1186
(dp1187
g62
(dp1188
g89
g90
ssg71
g1177
sg64
(lp1189
S':'
asbag57
(g78
g59
NtRp1190
(dp1191
g62
(dp1192
sg71
g1177
sg64
(lp1193
g57
(g58
g59
NtRp1194
(dp1195
g62
(dp1196
g70
I4
ssg71
g1190
sg64
(lp1197
g57
(g66
g59
NtRp1198
(dp1199
g62
(dp1200
g70
I3
ssg71
Nsg64
(lp1201
g57
(g73
g59
NtRp1202
(dp1203
g62
(dp1204
sg71
g1198
sg64
(lp1205
g57
(g78
g59
NtRp1206
(dp1207
g62
(dp1208
sg71
g1202
sg64
(lp1209
g57
(g58
g59
NtRp1210
(dp1211
g62
(dp1212
g70
I3
ssg71
g1206
sg64
(lp1213
S'1'
asbasbasbag57
(g73
g59
NtRp1214
(dp1215
g62
(dp1216
sg71
g1198
sg64
(lp1217
g57
(g78
g59
NtRp1218
(dp1219
g62
(dp1220
sg71
g1214
sg64
(lp1221
g57
(g58
g59
NtRp1222
(dp1223
g62
(dp1224
g70
I3
ssg71
g1218
sg64
(lp1225
S'99'
p1226
asbasbasbag57
(g73
g59
NtRp1227
(dp1228
g62
(dp1229
sg71
g1198
sg64
(lp1230
g57
(g78
g59
NtRp1231
(dp1232
g62
(dp1233
sg71
g1227
sg64
(lp1234
g57
(g58
g59
NtRp1235
(dp1236
g62
(dp1237
g70
I3
ssg71
g1231
sg64
(lp1238
S'4'
asbasbasbag57
(g73
g59
NtRp1239
(dp1240
g62
(dp1241
sg71
g1198
sg64
(lp1242
g57
(g78
g59
NtRp1243
(dp1244
g62
(dp1245
sg71
g1239
sg64
(lp1246
g57
(g58
g59
NtRp1247
(dp1248
g62
(dp1249
g70
I3
ssg71
g1243
sg64
(lp1250
S'datetime.datetime(2011, 12, 14, 14, 46, 14)'
p1251
asbasbasbag57
(g73
g59
NtRp1252
(dp1253
g62
(dp1254
sg71
g1198
sg64
(lp1255
g57
(g78
g59
NtRp1256
(dp1257
g62
(dp1258
sg71
g1252
sg64
(lp1259
g57
(g58
g59
NtRp1260
(dp1261
g62
(dp1262
g70
I3
ssg71
g1256
sg64
(lp1263
S'stable'
p1264
asbasbasbasbasbasbasbag57
(g73
g59
NtRp1265
(dp1266
g62
(dp1267
sg71
g452
sg64
(lp1268
g57
(g78
g59
NtRp1269
(dp1270
g62
(dp1271
g82
g83
ssg71
g1265
sg64
(lp1272
S'wsgi_errors'
p1273
asbag57
(g78
g59
NtRp1274
(dp1275
g62
(dp1276
g89
g90
ssg71
g1265
sg64
(lp1277
S':'
asbag57
(g78
g59
NtRp1278
(dp1279
g62
(dp1280
sg71
g1265
sg64
(lp1281
g57
(g58
g59
NtRp1282
(dp1283
g62
(dp1284
g70
I4
ssg71
g1278
sg64
(lp1285
S"<open file '<stderr>', mode 'w' at 0x100283270>"
p1286
asbasbasbag57
(g73
g59
NtRp1287
(dp1288
g62
(dp1289
sg71
g452
sg64
(lp1290
g57
(g78
g59
NtRp1291
(dp1292
g62
(dp1293
g82
g83
ssg71
g1287
sg64
(lp1294
S'wsgi_file_wrapper'
p1295
asbag57
(g78
g59
NtRp1296
(dp1297
g62
(dp1298
g89
g90
ssg71
g1287
sg64
(lp1299
S':'
asbag57
(g78
g59
NtRp1300
(dp1301
g62
(dp1302
sg71
g1287
sg64
(lp1303
g57
(g58
g59
NtRp1304
(dp1305
g62
(dp1306
g70
I4
ssg71
g1300
sg64
(lp1307
S'<class wsgiref.util.FileWrapper at 0x1014c1c18>'
p1308
asbasbasbag57
(g73
g59
NtRp1309
(dp1310
g62
(dp1311
sg71
g452
sg64
(lp1312
g57
(g78
g59
NtRp1313
(dp1314
g62
(dp1315
g82
g83
ssg71
g1309
sg64
(lp1316
S'wsgi_input'
p1317
asbag57
(g78
g59
NtRp1318
(dp1319
g62
(dp1320
g89
g90
ssg71
g1309
sg64
(lp1321
S':'
asbag57
(g78
g59
NtRp1322
(dp1323
g62
(dp1324
sg71
g1309
sg64
(lp1325
g57
(g58
g59
NtRp1326
(dp1327
g62
(dp1328
g70
I4
ssg71
g1322
sg64
(lp1329
S'<socket._fileobject object at 0x119e450d0>'
p1330
asbasbasbag57
(g73
g59
NtRp1331
(dp1332
g62
(dp1333
sg71
g452
sg64
(lp1334
g57
(g78
g59
NtRp1335
(dp1336
g62
(dp1337
g82
g83
ssg71
g1331
sg64
(lp1338
S'wsgi_multiprocess'
p1339
asbag57
(g78
g59
NtRp1340
(dp1341
g62
(dp1342
g89
g90
ssg71
g1331
sg64
(lp1343
S':'
asbag57
(g78
g59
NtRp1344
(dp1345
g62
(dp1346
sg71
g1331
sg64
(lp1347
g57
(g58
g59
NtRp1348
(dp1349
g62
(dp1350
g70
I4
ssg71
g1344
sg64
(lp1351
g611
asbasbasbag57
(g73
g59
NtRp1352
(dp1353
g62
(dp1354
sg71
g452
sg64
(lp1355
g57
(g78
g59
NtRp1356
(dp1357
g62
(dp1358
g82
g83
ssg71
g1352
sg64
(lp1359
S'wsgi_multithread'
p1360
asbag57
(g78
g59
NtRp1361
(dp1362
g62
(dp1363
g89
g90
ssg71
g1352
sg64
(lp1364
S':'
asbag57
(g78
g59
NtRp1365
(dp1366
g62
(dp1367
sg71
g1352
sg64
(lp1368
g57
(g58
g59
NtRp1369
(dp1370
g62
(dp1371
g70
I4
ssg71
g1365
sg64
(lp1372
g100
asbasbasbag57
(g73
g59
NtRp1373
(dp1374
g62
(dp1375
sg71
g452
sg64
(lp1376
g57
(g78
g59
NtRp1377
(dp1378
g62
(dp1379
g82
g83
ssg71
g1373
sg64
(lp1380
S'wsgi_run_once'
p1381
asbag57
(g78
g59
NtRp1382
(dp1383
g62
(dp1384
g89
g90
ssg71
g1373
sg64
(lp1385
S':'
asbag57
(g78
g59
NtRp1386
(dp1387
g62
(dp1388
sg71
g1373
sg64
(lp1389
g57
(g58
g59
NtRp1390
(dp1391
g62
(dp1392
g70
I4
ssg71
g1386
sg64
(lp1393
g611
asbasbasbag57
(g73
g59
NtRp1394
(dp1395
g62
(dp1396
sg71
g452
sg64
(lp1397
g57
(g78
g59
NtRp1398
(dp1399
g62
(dp1400
g82
g83
ssg71
g1394
sg64
(lp1401
S'wsgi_url_scheme'
p1402
asbag57
(g78
g59
NtRp1403
(dp1404
g62
(dp1405
g89
g90
ssg71
g1394
sg64
(lp1406
S':'
asbag57
(g78
g59
NtRp1407
(dp1408
g62
(dp1409
sg71
g1394
sg64
(lp1410
g57
(g58
g59
NtRp1411
(dp1412
g62
(dp1413
g70
I4
ssg71
g1407
sg64
(lp1414
S'http'
p1415
asbasbasbag57
(g73
g59
NtRp1416
(dp1417
g62
(dp1418
sg71
g452
sg64
(lp1419
g57
(g78
g59
NtRp1420
(dp1421
g62
(dp1422
g82
g83
ssg71
g1416
sg64
(lp1423
S'wsgi_version'
p1424
asbag57
(g78
g59
NtRp1425
(dp1426
g62
(dp1427
g89
g90
ssg71
g1416
sg64
(lp1428
S':'
asbag57
(g78
g59
NtRp1429
(dp1430
g62
(dp1431
sg71
g1416
sg64
(lp1432
g57
(g58
g59
NtRp1433
(dp1434
g62
(dp1435
g70
I4
ssg71
g1429
sg64
(lp1436
g57
(g66
g59
NtRp1437
(dp1438
g62
(dp1439
g70
I3
ssg71
Nsg64
(lp1440
g57
(g73
g59
NtRp1441
(dp1442
g62
(dp1443
sg71
g1437
sg64
(lp1444
g57
(g78
g59
NtRp1445
(dp1446
g62
(dp1447
sg71
g1441
sg64
(lp1448
g57
(g58
g59
NtRp1449
(dp1450
g62
(dp1451
g70
I3
ssg71
g1445
sg64
(lp1452
S'1'
asbasbasbag57
(g73
g59
NtRp1453
(dp1454
g62
(dp1455
sg71
g1437
sg64
(lp1456
g57
(g78
g59
NtRp1457
(dp1458
g62
(dp1459
sg71
g1453
sg64
(lp1460
g57
(g58
g59
NtRp1461
(dp1462
g62
(dp1463
g70
I3
ssg71
g1457
sg64
(lp1464
S'0'
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp1465
(dp1466
g62
(dp1467
sg71
g67
sg64
(lp1468
g57
(g78
g59
NtRp1469
(dp1470
g62
(dp1471
g82
g83
ssg71
g1465
sg64
(lp1472
S'extension'
p1473
asbag57
(g78
g59
NtRp1474
(dp1475
g62
(dp1476
g89
g90
ssg71
g1465
sg64
(lp1477
S':'
asbag57
(g78
g59
NtRp1478
(dp1479
g62
(dp1480
sg71
g1465
sg64
(lp1481
g57
(g58
g59
NtRp1482
(dp1483
g62
(dp1484
g70
I5
ssg71
g1478
sg64
(lp1485
S'html'
p1486
asbasbasbag57
(g73
g59
NtRp1487
(dp1488
g62
(dp1489
sg71
g67
sg64
(lp1490
g57
(g78
g59
NtRp1491
(dp1492
g62
(dp1493
g82
g83
ssg71
g1487
sg64
(lp1494
S'folder'
p1495
asbag57
(g78
g59
NtRp1496
(dp1497
g62
(dp1498
g89
g90
ssg71
g1487
sg64
(lp1499
S':'
asbag57
(g78
g59
NtRp1500
(dp1501
g62
(dp1502
sg71
g1487
sg64
(lp1503
g57
(g58
g59
NtRp1504
(dp1505
g62
(dp1506
g70
I5
ssg71
g1500
sg64
(lp1507
S'/Users/cyan/Package/GitHub/funback/web2py/applications/admin/'
p1508
asbasbasbag57
(g73
g59
NtRp1509
(dp1510
g62
(dp1511
sg71
g67
sg64
(lp1512
g57
(g78
g59
NtRp1513
(dp1514
g62
(dp1515
g82
g83
ssg71
g1509
sg64
(lp1516
S'function'
p1517
asbag57
(g78
g59
NtRp1518
(dp1519
g62
(dp1520
g89
g90
ssg71
g1509
sg64
(lp1521
S':'
asbag57
(g78
g59
NtRp1522
(dp1523
g62
(dp1524
sg71
g1509
sg64
(lp1525
g57
(g58
g59
NtRp1526
(dp1527
g62
(dp1528
g70
I5
ssg71
g1522
sg64
(lp1529
S'check_version'
p1530
asbasbasbag57
(g73
g59
NtRp1531
(dp1532
g62
(dp1533
sg71
g67
sg64
(lp1534
g57
(g78
g59
NtRp1535
(dp1536
g62
(dp1537
g82
g83
ssg71
g1531
sg64
(lp1538
S'get_vars'
p1539
asbag57
(g78
g59
NtRp1540
(dp1541
g62
(dp1542
g89
g90
ssg71
g1531
sg64
(lp1543
S':'
asbag57
(g78
g59
NtRp1544
(dp1545
g62
(dp1546
sg71
g1531
sg64
(lp1547
g57
(g58
g59
NtRp1548
(dp1549
g62
(dp1550
g70
I5
ssg71
g1544
sg64
(lp1551
g57
(g66
g59
NtRp1552
(dp1553
g62
(dp1554
g70
I4
ssg71
Nsg64
(lp1555
sbasbasbasbag57
(g73
g59
NtRp1556
(dp1557
g62
(dp1558
sg71
g67
sg64
(lp1559
g57
(g78
g59
NtRp1560
(dp1561
g62
(dp1562
g82
g83
ssg71
g1556
sg64
(lp1563
S'global_settings'
p1564
asbag57
(g78
g59
NtRp1565
(dp1566
g62
(dp1567
g89
g90
ssg71
g1556
sg64
(lp1568
S':'
asbag57
(g78
g59
NtRp1569
(dp1570
g62
(dp1571
sg71
g1556
sg64
(lp1572
g57
(g58
g59
NtRp1573
(dp1574
g62
(dp1575
g70
I5
ssg71
g1569
sg64
(lp1576
g57
(g66
g59
NtRp1577
(dp1578
g62
(dp1579
g70
I4
ssg71
Nsg64
(lp1580
g57
(g73
g59
NtRp1581
(dp1582
g62
(dp1583
sg71
g1577
sg64
(lp1584
g57
(g78
g59
NtRp1585
(dp1586
g62
(dp1587
g82
g83
ssg71
g1581
sg64
(lp1588
g464
asbag57
(g78
g59
NtRp1589
(dp1590
g62
(dp1591
g89
g90
ssg71
g1581
sg64
(lp1592
S':'
asbag57
(g78
g59
NtRp1593
(dp1594
g62
(dp1595
sg71
g1581
sg64
(lp1596
g57
(g58
g59
NtRp1597
(dp1598
g62
(dp1599
g70
I4
ssg71
g1593
sg64
(lp1600
S"set(['/Users/cyan/Package/GitHub/funback/web2py/applications/welcome/', '/Users/cyan/Package/GitHub/funback/web2py/applications/admin/'])"
p1601
asbasbasbag57
(g73
g59
NtRp1602
(dp1603
g62
(dp1604
sg71
g1577
sg64
(lp1605
g57
(g78
g59
NtRp1606
(dp1607
g62
(dp1608
g82
g83
ssg71
g1602
sg64
(lp1609
g486
asbag57
(g78
g59
NtRp1610
(dp1611
g62
(dp1612
g89
g90
ssg71
g1602
sg64
(lp1613
S':'
asbag57
(g78
g59
NtRp1614
(dp1615
g62
(dp1616
sg71
g1602
sg64
(lp1617
g57
(g58
g59
NtRp1618
(dp1619
g62
(dp1620
g70
I4
ssg71
g1614
sg64
(lp1621
g499
asbasbasbag57
(g73
g59
NtRp1622
(dp1623
g62
(dp1624
sg71
g1577
sg64
(lp1625
g57
(g78
g59
NtRp1626
(dp1627
g62
(dp1628
g82
g83
ssg71
g1622
sg64
(lp1629
g508
asbag57
(g78
g59
NtRp1630
(dp1631
g62
(dp1632
g89
g90
ssg71
g1622
sg64
(lp1633
S':'
asbag57
(g78
g59
NtRp1634
(dp1635
g62
(dp1636
sg71
g1622
sg64
(lp1637
g57
(g58
g59
NtRp1638
(dp1639
g62
(dp1640
g70
I4
ssg71
g1634
sg64
(lp1641
g57
(g66
g59
NtRp1642
(dp1643
g62
(dp1644
g70
I3
ssg71
Nsg64
(lp1645
sbasbasbasbag57
(g73
g59
NtRp1646
(dp1647
g62
(dp1648
sg71
g1577
sg64
(lp1649
g57
(g78
g59
NtRp1650
(dp1651
g62
(dp1652
g82
g83
ssg71
g1646
sg64
(lp1653
g533
asbag57
(g78
g59
NtRp1654
(dp1655
g62
(dp1656
g89
g90
ssg71
g1646
sg64
(lp1657
S':'
asbag57
(g78
g59
NtRp1658
(dp1659
g62
(dp1660
sg71
g1646
sg64
(lp1661
g57
(g58
g59
NtRp1662
(dp1663
g62
(dp1664
g70
I4
ssg71
g1658
sg64
(lp1665
S"<Values at 0x1018ad4d0: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'cyan-1.local', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': '/Users/cyan/Package/GitHub/funback/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'socket_timeout': 1, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p1666
asbasbasbag57
(g73
g59
NtRp1667
(dp1668
g62
(dp1669
sg71
g1577
sg64
(lp1670
g57
(g78
g59
NtRp1671
(dp1672
g62
(dp1673
g82
g83
ssg71
g1667
sg64
(lp1674
g576
asbag57
(g78
g59
NtRp1675
(dp1676
g62
(dp1677
g89
g90
ssg71
g1667
sg64
(lp1678
S':'
asbag57
(g78
g59
NtRp1679
(dp1680
g62
(dp1681
sg71
g1667
sg64
(lp1682
g57
(g58
g59
NtRp1683
(dp1684
g62
(dp1685
g70
I4
ssg71
g1679
sg64
(lp1686
S'set([])'
p1687
asbasbasbag57
(g73
g59
NtRp1688
(dp1689
g62
(dp1690
sg71
g1577
sg64
(lp1691
g57
(g78
g59
NtRp1692
(dp1693
g62
(dp1694
g82
g83
ssg71
g1688
sg64
(lp1695
g598
asbag57
(g78
g59
NtRp1696
(dp1697
g62
(dp1698
g89
g90
ssg71
g1688
sg64
(lp1699
S':'
asbag57
(g78
g59
NtRp1700
(dp1701
g62
(dp1702
sg71
g1688
sg64
(lp1703
g57
(g58
g59
NtRp1704
(dp1705
g62
(dp1706
g70
I4
ssg71
g1700
sg64
(lp1707
g611
asbasbasbag57
(g73
g59
NtRp1708
(dp1709
g62
(dp1710
sg71
g1577
sg64
(lp1711
g57
(g78
g59
NtRp1712
(dp1713
g62
(dp1714
g82
g83
ssg71
g1708
sg64
(lp1715
g620
asbag57
(g78
g59
NtRp1716
(dp1717
g62
(dp1718
g89
g90
ssg71
g1708
sg64
(lp1719
S':'
asbag57
(g78
g59
NtRp1720
(dp1721
g62
(dp1722
sg71
g1708
sg64
(lp1723
g57
(g58
g59
NtRp1724
(dp1725
g62
(dp1726
g70
I4
ssg71
g1720
sg64
(lp1727
g633
asbasbasbag57
(g73
g59
NtRp1728
(dp1729
g62
(dp1730
sg71
g1577
sg64
(lp1731
g57
(g78
g59
NtRp1732
(dp1733
g62
(dp1734
g82
g83
ssg71
g1728
sg64
(lp1735
g883
asbag57
(g78
g59
NtRp1736
(dp1737
g62
(dp1738
g89
g90
ssg71
g1728
sg64
(lp1739
S':'
asbag57
(g78
g59
NtRp1740
(dp1741
g62
(dp1742
sg71
g1728
sg64
(lp1743
g57
(g58
g59
NtRp1744
(dp1745
g62
(dp1746
g70
I4
ssg71
g1740
sg64
(lp1747
g611
asbasbasbag57
(g73
g59
NtRp1748
(dp1749
g62
(dp1750
sg71
g1577
sg64
(lp1751
g57
(g78
g59
NtRp1752
(dp1753
g62
(dp1754
g82
g83
ssg71
g1748
sg64
(lp1755
g904
asbag57
(g78
g59
NtRp1756
(dp1757
g62
(dp1758
g89
g90
ssg71
g1748
sg64
(lp1759
S':'
asbag57
(g78
g59
NtRp1760
(dp1761
g62
(dp1762
sg71
g1748
sg64
(lp1763
g57
(g58
g59
NtRp1764
(dp1765
g62
(dp1766
g70
I4
ssg71
g1760
sg64
(lp1767
g611
asbasbasbag57
(g73
g59
NtRp1768
(dp1769
g62
(dp1770
sg71
g1577
sg64
(lp1771
g57
(g78
g59
NtRp1772
(dp1773
g62
(dp1774
g82
g83
ssg71
g1768
sg64
(lp1775
g1142
asbag57
(g78
g59
NtRp1776
(dp1777
g62
(dp1778
g89
g90
ssg71
g1768
sg64
(lp1779
S':'
asbag57
(g78
g59
NtRp1780
(dp1781
g62
(dp1782
sg71
g1768
sg64
(lp1783
g57
(g58
g59
NtRp1784
(dp1785
g62
(dp1786
g70
I4
ssg71
g1780
sg64
(lp1787
g1155
asbasbasbag57
(g73
g59
NtRp1788
(dp1789
g62
(dp1790
sg71
g1577
sg64
(lp1791
g57
(g78
g59
NtRp1792
(dp1793
g62
(dp1794
g82
g83
ssg71
g1788
sg64
(lp1795
g1185
asbag57
(g78
g59
NtRp1796
(dp1797
g62
(dp1798
g89
g90
ssg71
g1788
sg64
(lp1799
S':'
asbag57
(g78
g59
NtRp1800
(dp1801
g62
(dp1802
sg71
g1788
sg64
(lp1803
g57
(g58
g59
NtRp1804
(dp1805
g62
(dp1806
g70
I4
ssg71
g1800
sg64
(lp1807
g57
(g66
g59
NtRp1808
(dp1809
g62
(dp1810
g70
I3
ssg71
Nsg64
(lp1811
g57
(g73
g59
NtRp1812
(dp1813
g62
(dp1814
sg71
g1808
sg64
(lp1815
g57
(g78
g59
NtRp1816
(dp1817
g62
(dp1818
sg71
g1812
sg64
(lp1819
g57
(g58
g59
NtRp1820
(dp1821
g62
(dp1822
g70
I3
ssg71
g1816
sg64
(lp1823
S'1'
asbasbasbag57
(g73
g59
NtRp1824
(dp1825
g62
(dp1826
sg71
g1808
sg64
(lp1827
g57
(g78
g59
NtRp1828
(dp1829
g62
(dp1830
sg71
g1824
sg64
(lp1831
g57
(g58
g59
NtRp1832
(dp1833
g62
(dp1834
g70
I3
ssg71
g1828
sg64
(lp1835
S'99'
p1836
asbasbasbag57
(g73
g59
NtRp1837
(dp1838
g62
(dp1839
sg71
g1808
sg64
(lp1840
g57
(g78
g59
NtRp1841
(dp1842
g62
(dp1843
sg71
g1837
sg64
(lp1844
g57
(g58
g59
NtRp1845
(dp1846
g62
(dp1847
g70
I3
ssg71
g1841
sg64
(lp1848
S'4'
asbasbasbag57
(g73
g59
NtRp1849
(dp1850
g62
(dp1851
sg71
g1808
sg64
(lp1852
g57
(g78
g59
NtRp1853
(dp1854
g62
(dp1855
sg71
g1849
sg64
(lp1856
g57
(g58
g59
NtRp1857
(dp1858
g62
(dp1859
g70
I3
ssg71
g1853
sg64
(lp1860
S'datetime.datetime(2011, 12, 14, 14, 46, 14)'
p1861
asbasbasbag57
(g73
g59
NtRp1862
(dp1863
g62
(dp1864
sg71
g1808
sg64
(lp1865
g57
(g78
g59
NtRp1866
(dp1867
g62
(dp1868
sg71
g1862
sg64
(lp1869
g57
(g58
g59
NtRp1870
(dp1871
g62
(dp1872
g70
I3
ssg71
g1866
sg64
(lp1873
g1264
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp1874
(dp1875
g62
(dp1876
sg71
g67
sg64
(lp1877
g57
(g78
g59
NtRp1878
(dp1879
g62
(dp1880
g82
g83
ssg71
g1874
sg64
(lp1881
S'is_https'
p1882
asbag57
(g78
g59
NtRp1883
(dp1884
g62
(dp1885
g89
g90
ssg71
g1874
sg64
(lp1886
S':'
asbag57
(g78
g59
NtRp1887
(dp1888
g62
(dp1889
sg71
g1874
sg64
(lp1890
g57
(g58
g59
NtRp1891
(dp1892
g62
(dp1893
g70
I5
ssg71
g1887
sg64
(lp1894
g611
asbasbasbag57
(g73
g59
NtRp1895
(dp1896
g62
(dp1897
sg71
g67
sg64
(lp1898
g57
(g78
g59
NtRp1899
(dp1900
g62
(dp1901
g82
g83
ssg71
g1895
sg64
(lp1902
S'is_local'
p1903
asbag57
(g78
g59
NtRp1904
(dp1905
g62
(dp1906
g89
g90
ssg71
g1895
sg64
(lp1907
S':'
asbag57
(g78
g59
NtRp1908
(dp1909
g62
(dp1910
sg71
g1895
sg64
(lp1911
g57
(g58
g59
NtRp1912
(dp1913
g62
(dp1914
g70
I5
ssg71
g1908
sg64
(lp1915
g100
asbasbasbag57
(g73
g59
NtRp1916
(dp1917
g62
(dp1918
sg71
g67
sg64
(lp1919
g57
(g78
g59
NtRp1920
(dp1921
g62
(dp1922
g82
g83
ssg71
g1916
sg64
(lp1923
S'is_restful'
p1924
asbag57
(g78
g59
NtRp1925
(dp1926
g62
(dp1927
g89
g90
ssg71
g1916
sg64
(lp1928
S':'
asbag57
(g78
g59
NtRp1929
(dp1930
g62
(dp1931
sg71
g1916
sg64
(lp1932
g57
(g58
g59
NtRp1933
(dp1934
g62
(dp1935
g70
I5
ssg71
g1929
sg64
(lp1936
g611
asbasbasbag57
(g73
g59
NtRp1937
(dp1938
g62
(dp1939
sg71
g67
sg64
(lp1940
g57
(g78
g59
NtRp1941
(dp1942
g62
(dp1943
g82
g83
ssg71
g1937
sg64
(lp1944
S'now'
p1945
asbag57
(g78
g59
NtRp1946
(dp1947
g62
(dp1948
g89
g90
ssg71
g1937
sg64
(lp1949
S':'
asbag57
(g78
g59
NtRp1950
(dp1951
g62
(dp1952
sg71
g1937
sg64
(lp1953
g57
(g58
g59
NtRp1954
(dp1955
g62
(dp1956
g70
I5
ssg71
g1950
sg64
(lp1957
S'datetime.datetime(2012, 3, 25, 20, 45, 50, 494981)'
p1958
asbasbasbag57
(g73
g59
NtRp1959
(dp1960
g62
(dp1961
sg71
g67
sg64
(lp1962
g57
(g78
g59
NtRp1963
(dp1964
g62
(dp1965
g82
g83
ssg71
g1959
sg64
(lp1966
S'post_vars'
p1967
asbag57
(g78
g59
NtRp1968
(dp1969
g62
(dp1970
g89
g90
ssg71
g1959
sg64
(lp1971
S':'
asbag57
(g78
g59
NtRp1972
(dp1973
g62
(dp1974
sg71
g1959
sg64
(lp1975
g57
(g58
g59
NtRp1976
(dp1977
g62
(dp1978
g70
I5
ssg71
g1972
sg64
(lp1979
g57
(g66
g59
NtRp1980
(dp1981
g62
(dp1982
g70
I4
ssg71
Nsg64
(lp1983
sbasbasbasbag57
(g73
g59
NtRp1984
(dp1985
g62
(dp1986
sg71
g67
sg64
(lp1987
g57
(g78
g59
NtRp1988
(dp1989
g62
(dp1990
g82
g83
ssg71
g1984
sg64
(lp1991
S'url'
p1992
asbag57
(g78
g59
NtRp1993
(dp1994
g62
(dp1995
g89
g90
ssg71
g1984
sg64
(lp1996
S':'
asbag57
(g78
g59
NtRp1997
(dp1998
g62
(dp1999
sg71
g1984
sg64
(lp2000
g57
(g58
g59
NtRp2001
(dp2002
g62
(dp2003
g70
I5
ssg71
g1997
sg64
(lp2004
S'/admin/default/check_version'
p2005
asbasbasbag57
(g73
g59
NtRp2006
(dp2007
g62
(dp2008
sg71
g67
sg64
(lp2009
g57
(g78
g59
NtRp2010
(dp2011
g62
(dp2012
g82
g83
ssg71
g2006
sg64
(lp2013
S'utcnow'
p2014
asbag57
(g78
g59
NtRp2015
(dp2016
g62
(dp2017
g89
g90
ssg71
g2006
sg64
(lp2018
S':'
asbag57
(g78
g59
NtRp2019
(dp2020
g62
(dp2021
sg71
g2006
sg64
(lp2022
g57
(g58
g59
NtRp2023
(dp2024
g62
(dp2025
g70
I5
ssg71
g2019
sg64
(lp2026
S'datetime.datetime(2012, 3, 26, 0, 45, 50, 494990)'
p2027
asbasbasbag57
(g73
g59
NtRp2028
(dp2029
g62
(dp2030
sg71
g67
sg64
(lp2031
g57
(g78
g59
NtRp2032
(dp2033
g62
(dp2034
g82
g83
ssg71
g2028
sg64
(lp2035
S'uuid'
p2036
asbag57
(g78
g59
NtRp2037
(dp2038
g62
(dp2039
g89
g90
ssg71
g2028
sg64
(lp2040
S':'
asbag57
(g78
g59
NtRp2041
(dp2042
g62
(dp2043
sg71
g2028
sg64
(lp2044
g57
(g58
g59
NtRp2045
(dp2046
g62
(dp2047
g70
I5
ssg71
g2041
sg64
(lp2048
S'admin/127.0.0.1.2012-03-25.20-45-50.1597fb50-f421-4aca-ac51-87e6eb96bbf9'
p2049
asbasbasbag57
(g73
g59
NtRp2050
(dp2051
g62
(dp2052
sg71
g67
sg64
(lp2053
g57
(g78
g59
NtRp2054
(dp2055
g62
(dp2056
g82
g83
ssg71
g2050
sg64
(lp2057
S'vars'
p2058
asbag57
(g78
g59
NtRp2059
(dp2060
g62
(dp2061
g89
g90
ssg71
g2050
sg64
(lp2062
S':'
asbag57
(g78
g59
NtRp2063
(dp2064
g62
(dp2065
sg71
g2050
sg64
(lp2066
g57
(g58
g59
NtRp2067
(dp2068
g62
(dp2069
g70
I5
ssg71
g2063
sg64
(lp2070
g57
(g66
g59
NtRp2071
(dp2072
g62
(dp2073
g70
I4
ssg71
Nsg64
(lp2074
sbasbasbasbag57
(g73
g59
NtRp2075
(dp2076
g62
(dp2077
sg71
g67
sg64
(lp2078
g57
(g78
g59
NtRp2079
(dp2080
g62
(dp2081
g82
g83
ssg71
g2075
sg64
(lp2082
S'wsgi'
p2083
asbag57
(g78
g59
NtRp2084
(dp2085
g62
(dp2086
g89
g90
ssg71
g2075
sg64
(lp2087
S':'
asbag57
(g78
g59
NtRp2088
(dp2089
g62
(dp2090
sg71
g2075
sg64
(lp2091
g57
(g58
g59
NtRp2092
(dp2093
g62
(dp2094
g70
I5
ssg71
g2088
sg64
(lp2095
g57
(g66
g59
NtRp2096
(dp2097
g62
(dp2098
g70
I4
ssg71
Nsg64
(lp2099
g57
(g73
g59
NtRp2100
(dp2101
g62
(dp2102
sg71
g2096
sg64
(lp2103
g57
(g78
g59
NtRp2104
(dp2105
g62
(dp2106
g82
g83
ssg71
g2100
sg64
(lp2107
S'environ'
p2108
asbag57
(g78
g59
NtRp2109
(dp2110
g62
(dp2111
g89
g90
ssg71
g2100
sg64
(lp2112
S':'
asbag57
(g78
g59
NtRp2113
(dp2114
g62
(dp2115
sg71
g2100
sg64
(lp2116
g57
(g58
g59
NtRp2117
(dp2118
g62
(dp2119
g70
I4
ssg71
g2113
sg64
(lp2120
g57
(g66
g59
NtRp2121
(dp2122
g62
(dp2123
g70
I3
ssg71
Nsg64
(lp2124
g57
(g73
g59
NtRp2125
(dp2126
g62
(dp2127
sg71
g2121
sg64
(lp2128
g57
(g78
g59
NtRp2129
(dp2130
g62
(dp2131
g82
g83
ssg71
g2125
sg64
(lp2132
S'CONTENT_LENGTH'
p2133
asbag57
(g78
g59
NtRp2134
(dp2135
g62
(dp2136
g89
g90
ssg71
g2125
sg64
(lp2137
S':'
asbag57
(g78
g59
NtRp2138
(dp2139
g62
(dp2140
sg71
g2125
sg64
(lp2141
g57
(g58
g59
NtRp2142
(dp2143
g62
(dp2144
g70
I3
ssg71
g2138
sg64
(lp2145
S'0'
asbasbasbag57
(g73
g59
NtRp2146
(dp2147
g62
(dp2148
sg71
g2121
sg64
(lp2149
g57
(g78
g59
NtRp2150
(dp2151
g62
(dp2152
g82
g83
ssg71
g2146
sg64
(lp2153
S'HTTP_ACCEPT'
p2154
asbag57
(g78
g59
NtRp2155
(dp2156
g62
(dp2157
g89
g90
ssg71
g2146
sg64
(lp2158
S':'
asbag57
(g78
g59
NtRp2159
(dp2160
g62
(dp2161
sg71
g2146
sg64
(lp2162
g57
(g58
g59
NtRp2163
(dp2164
g62
(dp2165
g70
I3
ssg71
g2159
sg64
(lp2166
g655
asbasbasbag57
(g73
g59
NtRp2167
(dp2168
g62
(dp2169
sg71
g2121
sg64
(lp2170
g57
(g78
g59
NtRp2171
(dp2172
g62
(dp2173
g82
g83
ssg71
g2167
sg64
(lp2174
S'HTTP_ACCEPT_ENCODING'
p2175
asbag57
(g78
g59
NtRp2176
(dp2177
g62
(dp2178
g89
g90
ssg71
g2167
sg64
(lp2179
S':'
asbag57
(g78
g59
NtRp2180
(dp2181
g62
(dp2182
sg71
g2167
sg64
(lp2183
g57
(g58
g59
NtRp2184
(dp2185
g62
(dp2186
g70
I3
ssg71
g2180
sg64
(lp2187
g677
asbasbasbag57
(g73
g59
NtRp2188
(dp2189
g62
(dp2190
sg71
g2121
sg64
(lp2191
g57
(g78
g59
NtRp2192
(dp2193
g62
(dp2194
g82
g83
ssg71
g2188
sg64
(lp2195
S'HTTP_ACCEPT_LANGUAGE'
p2196
asbag57
(g78
g59
NtRp2197
(dp2198
g62
(dp2199
g89
g90
ssg71
g2188
sg64
(lp2200
S':'
asbag57
(g78
g59
NtRp2201
(dp2202
g62
(dp2203
sg71
g2188
sg64
(lp2204
g57
(g58
g59
NtRp2205
(dp2206
g62
(dp2207
g70
I3
ssg71
g2201
sg64
(lp2208
g699
asbasbasbag57
(g73
g59
NtRp2209
(dp2210
g62
(dp2211
sg71
g2121
sg64
(lp2212
g57
(g78
g59
NtRp2213
(dp2214
g62
(dp2215
g82
g83
ssg71
g2209
sg64
(lp2216
S'HTTP_CONNECTION'
p2217
asbag57
(g78
g59
NtRp2218
(dp2219
g62
(dp2220
g89
g90
ssg71
g2209
sg64
(lp2221
S':'
asbag57
(g78
g59
NtRp2222
(dp2223
g62
(dp2224
sg71
g2209
sg64
(lp2225
g57
(g58
g59
NtRp2226
(dp2227
g62
(dp2228
g70
I3
ssg71
g2222
sg64
(lp2229
g721
asbasbasbag57
(g73
g59
NtRp2230
(dp2231
g62
(dp2232
sg71
g2121
sg64
(lp2233
g57
(g78
g59
NtRp2234
(dp2235
g62
(dp2236
g82
g83
ssg71
g2230
sg64
(lp2237
S'HTTP_CONTENT_LENGTH'
p2238
asbag57
(g78
g59
NtRp2239
(dp2240
g62
(dp2241
g89
g90
ssg71
g2230
sg64
(lp2242
S':'
asbag57
(g78
g59
NtRp2243
(dp2244
g62
(dp2245
sg71
g2230
sg64
(lp2246
g57
(g58
g59
NtRp2247
(dp2248
g62
(dp2249
g70
I3
ssg71
g2243
sg64
(lp2250
S'0'
asbasbasbag57
(g73
g59
NtRp2251
(dp2252
g62
(dp2253
sg71
g2121
sg64
(lp2254
g57
(g78
g59
NtRp2255
(dp2256
g62
(dp2257
g82
g83
ssg71
g2251
sg64
(lp2258
S'HTTP_COOKIE'
p2259
asbag57
(g78
g59
NtRp2260
(dp2261
g62
(dp2262
g89
g90
ssg71
g2251
sg64
(lp2263
S':'
asbag57
(g78
g59
NtRp2264
(dp2265
g62
(dp2266
sg71
g2251
sg64
(lp2267
g57
(g58
g59
NtRp2268
(dp2269
g62
(dp2270
g70
I3
ssg71
g2264
sg64
(lp2271
g764
asbasbasbag57
(g73
g59
NtRp2272
(dp2273
g62
(dp2274
sg71
g2121
sg64
(lp2275
g57
(g78
g59
NtRp2276
(dp2277
g62
(dp2278
g82
g83
ssg71
g2272
sg64
(lp2279
S'HTTP_HOST'
p2280
asbag57
(g78
g59
NtRp2281
(dp2282
g62
(dp2283
g89
g90
ssg71
g2272
sg64
(lp2284
S':'
asbag57
(g78
g59
NtRp2285
(dp2286
g62
(dp2287
sg71
g2272
sg64
(lp2288
g57
(g58
g59
NtRp2289
(dp2290
g62
(dp2291
g70
I3
ssg71
g2285
sg64
(lp2292
g786
asbasbasbag57
(g73
g59
NtRp2293
(dp2294
g62
(dp2295
sg71
g2121
sg64
(lp2296
g57
(g78
g59
NtRp2297
(dp2298
g62
(dp2299
g82
g83
ssg71
g2293
sg64
(lp2300
S'HTTP_ORIGIN'
p2301
asbag57
(g78
g59
NtRp2302
(dp2303
g62
(dp2304
g89
g90
ssg71
g2293
sg64
(lp2305
S':'
asbag57
(g78
g59
NtRp2306
(dp2307
g62
(dp2308
sg71
g2293
sg64
(lp2309
g57
(g58
g59
NtRp2310
(dp2311
g62
(dp2312
g70
I3
ssg71
g2306
sg64
(lp2313
g808
asbasbasbag57
(g73
g59
NtRp2314
(dp2315
g62
(dp2316
sg71
g2121
sg64
(lp2317
g57
(g78
g59
NtRp2318
(dp2319
g62
(dp2320
g82
g83
ssg71
g2314
sg64
(lp2321
S'HTTP_REFERER'
p2322
asbag57
(g78
g59
NtRp2323
(dp2324
g62
(dp2325
g89
g90
ssg71
g2314
sg64
(lp2326
S':'
asbag57
(g78
g59
NtRp2327
(dp2328
g62
(dp2329
sg71
g2314
sg64
(lp2330
g57
(g58
g59
NtRp2331
(dp2332
g62
(dp2333
g70
I3
ssg71
g2327
sg64
(lp2334
g830
asbasbasbag57
(g73
g59
NtRp2335
(dp2336
g62
(dp2337
sg71
g2121
sg64
(lp2338
g57
(g78
g59
NtRp2339
(dp2340
g62
(dp2341
g82
g83
ssg71
g2335
sg64
(lp2342
S'HTTP_USER_AGENT'
p2343
asbag57
(g78
g59
NtRp2344
(dp2345
g62
(dp2346
g89
g90
ssg71
g2335
sg64
(lp2347
S':'
asbag57
(g78
g59
NtRp2348
(dp2349
g62
(dp2350
sg71
g2335
sg64
(lp2351
g57
(g58
g59
NtRp2352
(dp2353
g62
(dp2354
g70
I3
ssg71
g2348
sg64
(lp2355
g852
asbasbasbag57
(g73
g59
NtRp2356
(dp2357
g62
(dp2358
sg71
g2121
sg64
(lp2359
g57
(g78
g59
NtRp2360
(dp2361
g62
(dp2362
g82
g83
ssg71
g2356
sg64
(lp2363
S'HTTP_X_REQUESTED_WITH'
p2364
asbag57
(g78
g59
NtRp2365
(dp2366
g62
(dp2367
g89
g90
ssg71
g2356
sg64
(lp2368
S':'
asbag57
(g78
g59
NtRp2369
(dp2370
g62
(dp2371
sg71
g2356
sg64
(lp2372
g57
(g58
g59
NtRp2373
(dp2374
g62
(dp2375
g70
I3
ssg71
g2369
sg64
(lp2376
g874
asbasbasbag57
(g73
g59
NtRp2377
(dp2378
g62
(dp2379
sg71
g2121
sg64
(lp2380
g57
(g78
g59
NtRp2381
(dp2382
g62
(dp2383
g82
g83
ssg71
g2377
sg64
(lp2384
S'PATH_INFO'
p2385
asbag57
(g78
g59
NtRp2386
(dp2387
g62
(dp2388
g89
g90
ssg71
g2377
sg64
(lp2389
S':'
asbag57
(g78
g59
NtRp2390
(dp2391
g62
(dp2392
sg71
g2377
sg64
(lp2393
g57
(g58
g59
NtRp2394
(dp2395
g62
(dp2396
g70
I3
ssg71
g2390
sg64
(lp2397
g938
asbasbasbag57
(g73
g59
NtRp2398
(dp2399
g62
(dp2400
sg71
g2121
sg64
(lp2401
g57
(g78
g59
NtRp2402
(dp2403
g62
(dp2404
g82
g83
ssg71
g2398
sg64
(lp2405
S'QUERY_STRING'
p2406
asbag57
(g78
g59
NtRp2407
(dp2408
g62
(dp2409
g89
g90
ssg71
g2398
sg64
(lp2410
S':'
asbag57
(g78
g59
NtRp2411
(dp2412
g62
(dp2413
sg71
g2398
sg64
(lp2414
g57
(g58
g59
NtRp2415
(dp2416
g62
(dp2417
g70
I3
ssg71
g2411
sg64
(lp2418
S''
asbasbasbag57
(g73
g59
NtRp2419
(dp2420
g62
(dp2421
sg71
g2121
sg64
(lp2422
g57
(g78
g59
NtRp2423
(dp2424
g62
(dp2425
g82
g83
ssg71
g2419
sg64
(lp2426
S'REMOTE_ADDR'
p2427
asbag57
(g78
g59
NtRp2428
(dp2429
g62
(dp2430
g89
g90
ssg71
g2419
sg64
(lp2431
S':'
asbag57
(g78
g59
NtRp2432
(dp2433
g62
(dp2434
sg71
g2419
sg64
(lp2435
g57
(g58
g59
NtRp2436
(dp2437
g62
(dp2438
g70
I3
ssg71
g2432
sg64
(lp2439
g190
asbasbasbag57
(g73
g59
NtRp2440
(dp2441
g62
(dp2442
sg71
g2121
sg64
(lp2443
g57
(g78
g59
NtRp2444
(dp2445
g62
(dp2446
g82
g83
ssg71
g2440
sg64
(lp2447
S'REMOTE_PORT'
p2448
asbag57
(g78
g59
NtRp2449
(dp2450
g62
(dp2451
g89
g90
ssg71
g2440
sg64
(lp2452
S':'
asbag57
(g78
g59
NtRp2453
(dp2454
g62
(dp2455
sg71
g2440
sg64
(lp2456
g57
(g58
g59
NtRp2457
(dp2458
g62
(dp2459
g70
I3
ssg71
g2453
sg64
(lp2460
g1002
asbasbasbag57
(g73
g59
NtRp2461
(dp2462
g62
(dp2463
sg71
g2121
sg64
(lp2464
g57
(g78
g59
NtRp2465
(dp2466
g62
(dp2467
g82
g83
ssg71
g2461
sg64
(lp2468
S'REQUEST_METHOD'
p2469
asbag57
(g78
g59
NtRp2470
(dp2471
g62
(dp2472
g89
g90
ssg71
g2461
sg64
(lp2473
S':'
asbag57
(g78
g59
NtRp2474
(dp2475
g62
(dp2476
sg71
g2461
sg64
(lp2477
g57
(g58
g59
NtRp2478
(dp2479
g62
(dp2480
g70
I3
ssg71
g2474
sg64
(lp2481
g1024
asbasbasbag57
(g73
g59
NtRp2482
(dp2483
g62
(dp2484
sg71
g2121
sg64
(lp2485
g57
(g78
g59
NtRp2486
(dp2487
g62
(dp2488
g82
g83
ssg71
g2482
sg64
(lp2489
S'SCRIPT_NAME'
p2490
asbag57
(g78
g59
NtRp2491
(dp2492
g62
(dp2493
g89
g90
ssg71
g2482
sg64
(lp2494
S':'
asbag57
(g78
g59
NtRp2495
(dp2496
g62
(dp2497
sg71
g2482
sg64
(lp2498
g57
(g58
g59
NtRp2499
(dp2500
g62
(dp2501
g70
I3
ssg71
g2495
sg64
(lp2502
S''
asbasbasbag57
(g73
g59
NtRp2503
(dp2504
g62
(dp2505
sg71
g2121
sg64
(lp2506
g57
(g78
g59
NtRp2507
(dp2508
g62
(dp2509
g82
g83
ssg71
g2503
sg64
(lp2510
S'SERVER_NAME'
p2511
asbag57
(g78
g59
NtRp2512
(dp2513
g62
(dp2514
g89
g90
ssg71
g2503
sg64
(lp2515
S':'
asbag57
(g78
g59
NtRp2516
(dp2517
g62
(dp2518
sg71
g2503
sg64
(lp2519
g57
(g58
g59
NtRp2520
(dp2521
g62
(dp2522
g70
I3
ssg71
g2516
sg64
(lp2523
g1067
asbasbasbag57
(g73
g59
NtRp2524
(dp2525
g62
(dp2526
sg71
g2121
sg64
(lp2527
g57
(g78
g59
NtRp2528
(dp2529
g62
(dp2530
g82
g83
ssg71
g2524
sg64
(lp2531
S'SERVER_PORT'
p2532
asbag57
(g78
g59
NtRp2533
(dp2534
g62
(dp2535
g89
g90
ssg71
g2524
sg64
(lp2536
S':'
asbag57
(g78
g59
NtRp2537
(dp2538
g62
(dp2539
sg71
g2524
sg64
(lp2540
g57
(g58
g59
NtRp2541
(dp2542
g62
(dp2543
g70
I3
ssg71
g2537
sg64
(lp2544
g1089
asbasbasbag57
(g73
g59
NtRp2545
(dp2546
g62
(dp2547
sg71
g2121
sg64
(lp2548
g57
(g78
g59
NtRp2549
(dp2550
g62
(dp2551
g82
g83
ssg71
g2545
sg64
(lp2552
S'SERVER_PROTOCOL'
p2553
asbag57
(g78
g59
NtRp2554
(dp2555
g62
(dp2556
g89
g90
ssg71
g2545
sg64
(lp2557
S':'
asbag57
(g78
g59
NtRp2558
(dp2559
g62
(dp2560
sg71
g2545
sg64
(lp2561
g57
(g58
g59
NtRp2562
(dp2563
g62
(dp2564
g70
I3
ssg71
g2558
sg64
(lp2565
g1111
asbasbasbag57
(g73
g59
NtRp2566
(dp2567
g62
(dp2568
sg71
g2121
sg64
(lp2569
g57
(g78
g59
NtRp2570
(dp2571
g62
(dp2572
g82
g83
ssg71
g2566
sg64
(lp2573
S'SERVER_SOFTWARE'
p2574
asbag57
(g78
g59
NtRp2575
(dp2576
g62
(dp2577
g89
g90
ssg71
g2566
sg64
(lp2578
S':'
asbag57
(g78
g59
NtRp2579
(dp2580
g62
(dp2581
sg71
g2566
sg64
(lp2582
g57
(g58
g59
NtRp2583
(dp2584
g62
(dp2585
g70
I3
ssg71
g2579
sg64
(lp2586
g1133
asbasbasbag57
(g73
g59
NtRp2587
(dp2588
g62
(dp2589
sg71
g2121
sg64
(lp2590
g57
(g78
g59
NtRp2591
(dp2592
g62
(dp2593
g82
g83
ssg71
g2587
sg64
(lp2594
S'wsgi.errors'
p2595
asbag57
(g78
g59
NtRp2596
(dp2597
g62
(dp2598
g89
g90
ssg71
g2587
sg64
(lp2599
S':'
asbag57
(g78
g59
NtRp2600
(dp2601
g62
(dp2602
sg71
g2587
sg64
(lp2603
g57
(g58
g59
NtRp2604
(dp2605
g62
(dp2606
g70
I3
ssg71
g2600
sg64
(lp2607
S"<open file '<stderr>', mode 'w' at 0x100283270>"
p2608
asbasbasbag57
(g73
g59
NtRp2609
(dp2610
g62
(dp2611
sg71
g2121
sg64
(lp2612
g57
(g78
g59
NtRp2613
(dp2614
g62
(dp2615
g82
g83
ssg71
g2609
sg64
(lp2616
S'wsgi.file_wrapper'
p2617
asbag57
(g78
g59
NtRp2618
(dp2619
g62
(dp2620
g89
g90
ssg71
g2609
sg64
(lp2621
S':'
asbag57
(g78
g59
NtRp2622
(dp2623
g62
(dp2624
sg71
g2609
sg64
(lp2625
g57
(g58
g59
NtRp2626
(dp2627
g62
(dp2628
g70
I3
ssg71
g2622
sg64
(lp2629
S'<class wsgiref.util.FileWrapper at 0x1014c1c18>'
p2630
asbasbasbag57
(g73
g59
NtRp2631
(dp2632
g62
(dp2633
sg71
g2121
sg64
(lp2634
g57
(g78
g59
NtRp2635
(dp2636
g62
(dp2637
g82
g83
ssg71
g2631
sg64
(lp2638
S'wsgi.input'
p2639
asbag57
(g78
g59
NtRp2640
(dp2641
g62
(dp2642
g89
g90
ssg71
g2631
sg64
(lp2643
S':'
asbag57
(g78
g59
NtRp2644
(dp2645
g62
(dp2646
sg71
g2631
sg64
(lp2647
g57
(g58
g59
NtRp2648
(dp2649
g62
(dp2650
g70
I3
ssg71
g2644
sg64
(lp2651
S"<open file '<fdopen>', mode 'w+b' at 0x1019aea50>"
p2652
asbasbasbag57
(g73
g59
NtRp2653
(dp2654
g62
(dp2655
sg71
g2121
sg64
(lp2656
g57
(g78
g59
NtRp2657
(dp2658
g62
(dp2659
g82
g83
ssg71
g2653
sg64
(lp2660
S'wsgi.multiprocess'
p2661
asbag57
(g78
g59
NtRp2662
(dp2663
g62
(dp2664
g89
g90
ssg71
g2653
sg64
(lp2665
S':'
asbag57
(g78
g59
NtRp2666
(dp2667
g62
(dp2668
sg71
g2653
sg64
(lp2669
g57
(g58
g59
NtRp2670
(dp2671
g62
(dp2672
g70
I3
ssg71
g2666
sg64
(lp2673
g611
asbasbasbag57
(g73
g59
NtRp2674
(dp2675
g62
(dp2676
sg71
g2121
sg64
(lp2677
g57
(g78
g59
NtRp2678
(dp2679
g62
(dp2680
g82
g83
ssg71
g2674
sg64
(lp2681
S'wsgi.multithread'
p2682
asbag57
(g78
g59
NtRp2683
(dp2684
g62
(dp2685
g89
g90
ssg71
g2674
sg64
(lp2686
S':'
asbag57
(g78
g59
NtRp2687
(dp2688
g62
(dp2689
sg71
g2674
sg64
(lp2690
g57
(g58
g59
NtRp2691
(dp2692
g62
(dp2693
g70
I3
ssg71
g2687
sg64
(lp2694
g100
asbasbasbag57
(g73
g59
NtRp2695
(dp2696
g62
(dp2697
sg71
g2121
sg64
(lp2698
g57
(g78
g59
NtRp2699
(dp2700
g62
(dp2701
g82
g83
ssg71
g2695
sg64
(lp2702
S'wsgi.run_once'
p2703
asbag57
(g78
g59
NtRp2704
(dp2705
g62
(dp2706
g89
g90
ssg71
g2695
sg64
(lp2707
S':'
asbag57
(g78
g59
NtRp2708
(dp2709
g62
(dp2710
sg71
g2695
sg64
(lp2711
g57
(g58
g59
NtRp2712
(dp2713
g62
(dp2714
g70
I3
ssg71
g2708
sg64
(lp2715
g611
asbasbasbag57
(g73
g59
NtRp2716
(dp2717
g62
(dp2718
sg71
g2121
sg64
(lp2719
g57
(g78
g59
NtRp2720
(dp2721
g62
(dp2722
g82
g83
ssg71
g2716
sg64
(lp2723
S'wsgi.url_scheme'
p2724
asbag57
(g78
g59
NtRp2725
(dp2726
g62
(dp2727
g89
g90
ssg71
g2716
sg64
(lp2728
S':'
asbag57
(g78
g59
NtRp2729
(dp2730
g62
(dp2731
sg71
g2716
sg64
(lp2732
g57
(g58
g59
NtRp2733
(dp2734
g62
(dp2735
g70
I3
ssg71
g2729
sg64
(lp2736
g1415
asbasbasbag57
(g73
g59
NtRp2737
(dp2738
g62
(dp2739
sg71
g2121
sg64
(lp2740
g57
(g78
g59
NtRp2741
(dp2742
g62
(dp2743
g82
g83
ssg71
g2737
sg64
(lp2744
S'wsgi.version'
p2745
asbag57
(g78
g59
NtRp2746
(dp2747
g62
(dp2748
g89
g90
ssg71
g2737
sg64
(lp2749
S':'
asbag57
(g78
g59
NtRp2750
(dp2751
g62
(dp2752
sg71
g2737
sg64
(lp2753
g57
(g58
g59
NtRp2754
(dp2755
g62
(dp2756
g70
I3
ssg71
g2750
sg64
(lp2757
S'1'
asbasbasbasbasbasbasbasbasbasbasbasbasbsS'frames'
p2758
(lp2759
(dp2760
S'file'
p2761
S'/Users/cyan/Package/GitHub/funback/web2py/gluon/restricted.py'
p2762
sS'dump'
p2763
(dp2764
S'environment'
p2765
S"{'A': <class 'gluon.html.A'>, 'ALLOW_TOGGLE': 'true', 'A_button': <function A_button>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, ...}"
p2766
sS'ccode'
p2767
S'<code object <module> at 0x1014757b0, file "/Use...plications/admin/controllers/default.py", line 3>'
p2768
ssS'lnum'
p2769
I204
sS'lines'
p2770
(dp2771
I199
S'    try:'
p2772
sI200
S'        if type(code) == types.CodeType:'
p2773
sI201
S'            ccode = code'
p2774
sI202
S'        else:'
p2775
sI203
S'            ccode = compile2(code,layer)'
p2776
sI204
S'        exec ccode in environment'
p2777
sI205
S'    except HTTP:'
p2778
sI206
S'        raise'
p2779
sI207
S'    except RestrictedError:'
p2780
sI208
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p2781
ssS'call'
p2782
S"(code='# coding: utf8\\n\\nEXPERIMENTAL_STUFF = True\\n\\nif EX...\\n\\nresponse._vars=response._caller(check_version)\\n', environment={'A': <class 'gluon.html.A'>, 'ALLOW_TOGGLE': 'true', 'A_button': <function A_button>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, ...}, layer='/Users/cyan/Package/GitHub/funback/web2py/applications/admin/controllers/default.py')"
p2783
sS'func'
p2784
S'restricted'
p2785
sa(dp2786
g2761
S'/Users/cyan/Package/GitHub/funback/web2py/applications/admin/controllers/default.py'
p2787
sg2763
(dp2788
sg2769
I1341
sg2770
(dp2789
I1330
S'    else:'
p2790
sI1331
S'        return dict(form=T("Disabled"))'
p2791
sI1332
S''
sI1333
S'def reload_routes():'
p2792
sI1334
S'    """ Reload routes.py """'
p2793
sI1335
S'    import gluon.rewrite'
p2794
sI1336
S'    gluon.rewrite.load()'
p2795
sI1337
S"    redirect(URL('site'))"
p2796
sI1338
S''
sI1339
S''
ssg2782
S'()'
p2797
sg2784
S'<module>'
p2798
sa(dp2799
g2761
S'/Users/cyan/Package/GitHub/funback/web2py/gluon/globals.py'
p2800
sg2763
(dp2801
S'self'
p2802
S'undefined'
p2803
sS'f'
S'<function check_version>'
p2804
ssg2769
I172
sg2770
(dp2805
I167
S'        self.meta = Storage()      # used by web2py_ajax.html'
p2806
sI168
S'        self.menu = []             # used by the default view layout'
p2807
sI169
S'        self.files = []            # used by web2py_ajax.html'
p2808
sI170
S'        self.generic_patterns = [] # patterns to allow generic views'
p2809
sI171
S'        self._vars = None'
p2810
sI172
S'        self._caller = lambda f: f()'
p2811
sI173
S'        self._view_environment = None'
p2812
sI174
S'        self._custom_commit = None'
p2813
sI175
S'        self._custom_rollback = None'
p2814
sI176
S''
ssg2782
S'(f=<function check_version>)'
p2815
sg2784
S'<lambda>'
p2816
sa(dp2817
g2761
S'/Users/cyan/Package/GitHub/funback/web2py/applications/admin/controllers/default.py'
p2818
sg2763
(dp2819
S'global XML'
p2820
S"<class 'gluon.html.XML'>"
p2821
sS'version_number'
p2822
S"(1, 99, 7, datetime.datetime(2012, 3, 4, 22, 12, 8), 'stable')"
p2823
ssg2769
I113
sg2770
(dp2824
I108
S"        return A(T('web2py is up to date'), _href=WEB2PY_URL)"
p2825
sI109
S'    elif platform.system().lower() in (\'windows\',\'win32\',\'win64\') and os.path.exists("web2py.exe"):'
p2826
sI110
S"        return SPAN('You should upgrade to version %s' % version_number)"
p2827
sI111
S'    else:'
p2828
sI112
S"        return sp_button(URL('upgrade_web2py'), T('upgrade now')) \\"
p2829
sI113
S'          + XML(\' <strong class="upgrade_version">%s</strong>\' % version_number)'
p2830
sI114
S''
sI115
S''
sI116
S'def logout():'
p2831
sI117
S'    """ Logout handler """'
p2832
ssg2782
S'()'
p2833
sg2784
S'check_version'
p2834
sasS'pyver'
p2835
S'Python 2.7.2: /Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python'
p2836
sS'session'
p2837
g57
(g58
g59
NtRp2838
(dp2839
g62
(dp2840
sg64
(lp2841
g57
(g66
g59
NtRp2842
(dp2843
g62
(dp2844
g70
I5
ssg71
Nsg64
(lp2845
g57
(g73
g59
NtRp2846
(dp2847
g62
(dp2848
sg71
g2842
sg64
(lp2849
g57
(g78
g59
NtRp2850
(dp2851
g62
(dp2852
g82
g83
ssg71
g2846
sg64
(lp2853
S'authorized'
p2854
asbag57
(g78
g59
NtRp2855
(dp2856
g62
(dp2857
g89
g90
ssg71
g2846
sg64
(lp2858
S':'
asbag57
(g78
g59
NtRp2859
(dp2860
g62
(dp2861
sg71
g2846
sg64
(lp2862
g57
(g58
g59
NtRp2863
(dp2864
g62
(dp2865
g70
I5
ssg71
g2859
sg64
(lp2866
g100
asbasbasbag57
(g73
g59
NtRp2867
(dp2868
g62
(dp2869
sg71
g2842
sg64
(lp2870
g57
(g78
g59
NtRp2871
(dp2872
g62
(dp2873
g82
g83
ssg71
g2867
sg64
(lp2874
S'check_version'
p2875
asbag57
(g78
g59
NtRp2876
(dp2877
g62
(dp2878
g89
g90
ssg71
g2867
sg64
(lp2879
S':'
asbag57
(g78
g59
NtRp2880
(dp2881
g62
(dp2882
sg71
g2867
sg64
(lp2883
g57
(g58
g59
NtRp2884
(dp2885
g62
(dp2886
g70
I5
ssg71
g2880
sg64
(lp2887
g611
asbasbasbag57
(g73
g59
NtRp2888
(dp2889
g62
(dp2890
sg71
g2842
sg64
(lp2891
g57
(g78
g59
NtRp2892
(dp2893
g62
(dp2894
g82
g83
ssg71
g2888
sg64
(lp2895
S'last_time'
p2896
asbag57
(g78
g59
NtRp2897
(dp2898
g62
(dp2899
g89
g90
ssg71
g2888
sg64
(lp2900
S':'
asbag57
(g78
g59
NtRp2901
(dp2902
g62
(dp2903
sg71
g2888
sg64
(lp2904
g57
(g58
g59
NtRp2905
(dp2906
g62
(dp2907
g70
I5
ssg71
g2901
sg64
(lp2908
S'1332722750.54445'
p2909
asbasbasbasbasbsS'etype'
p2910
S"<type 'exceptions.TypeError'>"
p2911
sS'date'
p2912
S'Sun Mar 25 20:45:51 2012'
p2913
sS'response'
p2914
g57
(g58
g59
NtRp2915
(dp2916
g62
(dp2917
sg64
(lp2918
g57
(g66
g59
NtRp2919
(dp2920
g62
(dp2921
g70
I5
ssg71
Nsg64
(lp2922
g57
(g73
g59
NtRp2923
(dp2924
g62
(dp2925
sg71
g2919
sg64
(lp2926
g57
(g78
g59
NtRp2927
(dp2928
g62
(dp2929
g82
g83
ssg71
g2923
sg64
(lp2930
g155
asbag57
(g78
g59
NtRp2931
(dp2932
g62
(dp2933
g89
g90
ssg71
g2923
sg64
(lp2934
S':'
asbag57
(g78
g59
NtRp2935
(dp2936
g62
(dp2937
sg71
g2923
sg64
(lp2938
g57
(g58
g59
NtRp2939
(dp2940
g62
(dp2941
g70
I5
ssg71
g2935
sg64
(lp2942
S'<cStringIO.StringO object at 0x119eacca8>'
p2943
asbasbasbag57
(g73
g59
NtRp2944
(dp2945
g62
(dp2946
sg71
g2919
sg64
(lp2947
g57
(g78
g59
NtRp2948
(dp2949
g62
(dp2950
g82
g83
ssg71
g2944
sg64
(lp2951
g221
asbag57
(g78
g59
NtRp2952
(dp2953
g62
(dp2954
g89
g90
ssg71
g2944
sg64
(lp2955
S':'
asbag57
(g78
g59
NtRp2956
(dp2957
g62
(dp2958
sg71
g2944
sg64
(lp2959
g57
(g58
g59
NtRp2960
(dp2961
g62
(dp2962
g70
I5
ssg71
g2956
sg64
(lp2963
g57
(g66
g59
NtRp2964
(dp2965
g62
(dp2966
g70
I4
ssg71
Nsg64
(lp2967
g57
(g73
g59
NtRp2968
(dp2969
g62
(dp2970
sg71
g2964
sg64
(lp2971
g57
(g78
g59
NtRp2972
(dp2973
g62
(dp2974
g82
g83
ssg71
g2968
sg64
(lp2975
S'session_id_admin'
p2976
asbag57
(g78
g59
NtRp2977
(dp2978
g62
(dp2979
g89
g90
ssg71
g2968
sg64
(lp2980
S':'
asbag57
(g78
g59
NtRp2981
(dp2982
g62
(dp2983
sg71
g2968
sg64
(lp2984
g57
(g58
g59
NtRp2985
(dp2986
g62
(dp2987
g70
I4
ssg71
g2981
sg64
(lp2988
g57
(g66
g59
NtRp2989
(dp2990
g62
(dp2991
g70
I3
ssg71
Nsg64
(lp2992
g57
(g73
g59
NtRp2993
(dp2994
g62
(dp2995
sg71
g2989
sg64
(lp2996
g57
(g78
g59
NtRp2997
(dp2998
g62
(dp2999
g82
g83
ssg71
g2993
sg64
(lp3000
g271
asbag57
(g78
g59
NtRp3001
(dp3002
g62
(dp3003
g89
g90
ssg71
g2993
sg64
(lp3004
S':'
asbag57
(g78
g59
NtRp3005
(dp3006
g62
(dp3007
sg71
g2993
sg64
(lp3008
g57
(g58
g59
NtRp3009
(dp3010
g62
(dp3011
g70
I3
ssg71
g3005
sg64
(lp3012
S''
asbasbasbag57
(g73
g59
NtRp3013
(dp3014
g62
(dp3015
sg71
g2989
sg64
(lp3016
g57
(g78
g59
NtRp3017
(dp3018
g62
(dp3019
g82
g83
ssg71
g3013
sg64
(lp3020
g292
asbag57
(g78
g59
NtRp3021
(dp3022
g62
(dp3023
g89
g90
ssg71
g3013
sg64
(lp3024
S':'
asbag57
(g78
g59
NtRp3025
(dp3026
g62
(dp3027
sg71
g3013
sg64
(lp3028
g57
(g58
g59
NtRp3029
(dp3030
g62
(dp3031
g70
I3
ssg71
g3025
sg64
(lp3032
S''
asbasbasbag57
(g73
g59
NtRp3033
(dp3034
g62
(dp3035
sg71
g2989
sg64
(lp3036
g57
(g78
g59
NtRp3037
(dp3038
g62
(dp3039
g82
g83
ssg71
g3033
sg64
(lp3040
g313
asbag57
(g78
g59
NtRp3041
(dp3042
g62
(dp3043
g89
g90
ssg71
g3033
sg64
(lp3044
S':'
asbag57
(g78
g59
NtRp3045
(dp3046
g62
(dp3047
sg71
g3033
sg64
(lp3048
g57
(g58
g59
NtRp3049
(dp3050
g62
(dp3051
g70
I3
ssg71
g3045
sg64
(lp3052
S''
asbasbasbag57
(g73
g59
NtRp3053
(dp3054
g62
(dp3055
sg71
g2989
sg64
(lp3056
g57
(g78
g59
NtRp3057
(dp3058
g62
(dp3059
g82
g83
ssg71
g3053
sg64
(lp3060
g334
asbag57
(g78
g59
NtRp3061
(dp3062
g62
(dp3063
g89
g90
ssg71
g3053
sg64
(lp3064
S':'
asbag57
(g78
g59
NtRp3065
(dp3066
g62
(dp3067
sg71
g3053
sg64
(lp3068
g57
(g58
g59
NtRp3069
(dp3070
g62
(dp3071
g70
I3
ssg71
g3065
sg64
(lp3072
S''
asbasbasbag57
(g73
g59
NtRp3073
(dp3074
g62
(dp3075
sg71
g2989
sg64
(lp3076
g57
(g78
g59
NtRp3077
(dp3078
g62
(dp3079
g82
g83
ssg71
g3073
sg64
(lp3080
g355
asbag57
(g78
g59
NtRp3081
(dp3082
g62
(dp3083
g89
g90
ssg71
g3073
sg64
(lp3084
S':'
asbag57
(g78
g59
NtRp3085
(dp3086
g62
(dp3087
sg71
g3073
sg64
(lp3088
g57
(g58
g59
NtRp3089
(dp3090
g62
(dp3091
g70
I3
ssg71
g3085
sg64
(lp3092
S''
asbasbasbag57
(g73
g59
NtRp3093
(dp3094
g62
(dp3095
sg71
g2989
sg64
(lp3096
g57
(g78
g59
NtRp3097
(dp3098
g62
(dp3099
g82
g83
ssg71
g3093
sg64
(lp3100
g376
asbag57
(g78
g59
NtRp3101
(dp3102
g62
(dp3103
g89
g90
ssg71
g3093
sg64
(lp3104
S':'
asbag57
(g78
g59
NtRp3105
(dp3106
g62
(dp3107
sg71
g3093
sg64
(lp3108
g57
(g58
g59
NtRp3109
(dp3110
g62
(dp3111
g70
I3
ssg71
g3105
sg64
(lp3112
S'/'
asbasbasbag57
(g73
g59
NtRp3113
(dp3114
g62
(dp3115
sg71
g2989
sg64
(lp3116
g57
(g78
g59
NtRp3117
(dp3118
g62
(dp3119
g82
g83
ssg71
g3113
sg64
(lp3120
g397
asbag57
(g78
g59
NtRp3121
(dp3122
g62
(dp3123
g89
g90
ssg71
g3113
sg64
(lp3124
S':'
asbag57
(g78
g59
NtRp3125
(dp3126
g62
(dp3127
sg71
g3113
sg64
(lp3128
g57
(g58
g59
NtRp3129
(dp3130
g62
(dp3131
g70
I3
ssg71
g3125
sg64
(lp3132
S''
asbasbasbag57
(g73
g59
NtRp3133
(dp3134
g62
(dp3135
sg71
g2989
sg64
(lp3136
g57
(g78
g59
NtRp3137
(dp3138
g62
(dp3139
g82
g83
ssg71
g3133
sg64
(lp3140
g418
asbag57
(g78
g59
NtRp3141
(dp3142
g62
(dp3143
g89
g90
ssg71
g3133
sg64
(lp3144
S':'
asbag57
(g78
g59
NtRp3145
(dp3146
g62
(dp3147
sg71
g3133
sg64
(lp3148
g57
(g58
g59
NtRp3149
(dp3150
g62
(dp3151
g70
I3
ssg71
g3145
sg64
(lp3152
S''
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp3153
(dp3154
g62
(dp3155
sg71
g2919
sg64
(lp3156
g57
(g78
g59
NtRp3157
(dp3158
g62
(dp3159
g82
g83
ssg71
g3153
sg64
(lp3160
S'files'
p3161
asbag57
(g78
g59
NtRp3162
(dp3163
g62
(dp3164
g89
g90
ssg71
g3153
sg64
(lp3165
S':'
asbag57
(g78
g59
NtRp3166
(dp3167
g62
(dp3168
sg71
g3153
sg64
(lp3169
g57
(g58
g59
NtRp3170
(dp3171
g62
(dp3172
g70
I5
ssg71
g3166
sg64
(lp3173
g57
(g66
g59
NtRp3174
(dp3175
g62
(dp3176
g70
I4
ssg71
Nsg64
(lp3177
g57
(g73
g59
NtRp3178
(dp3179
g62
(dp3180
sg71
g3174
sg64
(lp3181
g57
(g78
g59
NtRp3182
(dp3183
g62
(dp3184
sg71
g3178
sg64
(lp3185
g57
(g58
g59
NtRp3186
(dp3187
g62
(dp3188
g70
I4
ssg71
g3182
sg64
(lp3189
S'/admin/static/plugin_multiselect/jquery.dimensions.js'
p3190
asbasbasbag57
(g73
g59
NtRp3191
(dp3192
g62
(dp3193
sg71
g3174
sg64
(lp3194
g57
(g78
g59
NtRp3195
(dp3196
g62
(dp3197
sg71
g3191
sg64
(lp3198
g57
(g58
g59
NtRp3199
(dp3200
g62
(dp3201
g70
I4
ssg71
g3195
sg64
(lp3202
S'/admin/static/plugin_multiselect/jquery.multiselect.js'
p3203
asbasbasbag57
(g73
g59
NtRp3204
(dp3205
g62
(dp3206
sg71
g3174
sg64
(lp3207
g57
(g78
g59
NtRp3208
(dp3209
g62
(dp3210
sg71
g3204
sg64
(lp3211
g57
(g58
g59
NtRp3212
(dp3213
g62
(dp3214
g70
I4
ssg71
g3208
sg64
(lp3215
S'/admin/static/plugin_multiselect/jquery.multiselect.css'
p3216
asbasbasbag57
(g73
g59
NtRp3217
(dp3218
g62
(dp3219
sg71
g3174
sg64
(lp3220
g57
(g78
g59
NtRp3221
(dp3222
g62
(dp3223
sg71
g3217
sg64
(lp3224
g57
(g58
g59
NtRp3225
(dp3226
g62
(dp3227
g70
I4
ssg71
g3221
sg64
(lp3228
S'/admin/static/plugin_multiselect/start.js'
p3229
asbasbasbasbasbasbasbag57
(g73
g59
NtRp3230
(dp3231
g62
(dp3232
sg71
g2919
sg64
(lp3233
g57
(g78
g59
NtRp3234
(dp3235
g62
(dp3236
g82
g83
ssg71
g3230
sg64
(lp3237
S'flash'
p3238
asbag57
(g78
g59
NtRp3239
(dp3240
g62
(dp3241
g89
g90
ssg71
g3230
sg64
(lp3242
S':'
asbag57
(g78
g59
NtRp3243
(dp3244
g62
(dp3245
sg71
g3230
sg64
(lp3246
g57
(g58
g59
NtRp3247
(dp3248
g62
(dp3249
g70
I5
ssg71
g3243
sg64
(lp3250
S''
asbasbasbag57
(g73
g59
NtRp3251
(dp3252
g62
(dp3253
sg71
g2919
sg64
(lp3254
g57
(g78
g59
NtRp3255
(dp3256
g62
(dp3257
g82
g83
ssg71
g3251
sg64
(lp3258
S'generic_patterns'
p3259
asbag57
(g78
g59
NtRp3260
(dp3261
g62
(dp3262
g89
g90
ssg71
g3251
sg64
(lp3263
S':'
asbag57
(g78
g59
NtRp3264
(dp3265
g62
(dp3266
sg71
g3251
sg64
(lp3267
g57
(g58
g59
NtRp3268
(dp3269
g62
(dp3270
g70
I5
ssg71
g3264
sg64
(lp3271
g57
(g66
g59
NtRp3272
(dp3273
g62
(dp3274
g70
I4
ssg71
Nsg64
(lp3275
sbasbasbasbag57
(g73
g59
NtRp3276
(dp3277
g62
(dp3278
sg71
g2919
sg64
(lp3279
g57
(g78
g59
NtRp3280
(dp3281
g62
(dp3282
g82
g83
ssg71
g3276
sg64
(lp3283
S'headers'
p3284
asbag57
(g78
g59
NtRp3285
(dp3286
g62
(dp3287
g89
g90
ssg71
g3276
sg64
(lp3288
S':'
asbag57
(g78
g59
NtRp3289
(dp3290
g62
(dp3291
sg71
g3276
sg64
(lp3292
g57
(g58
g59
NtRp3293
(dp3294
g62
(dp3295
g70
I5
ssg71
g3289
sg64
(lp3296
g57
(g66
g59
NtRp3297
(dp3298
g62
(dp3299
g70
I4
ssg71
Nsg64
(lp3300
g57
(g73
g59
NtRp3301
(dp3302
g62
(dp3303
sg71
g3297
sg64
(lp3304
g57
(g78
g59
NtRp3305
(dp3306
g62
(dp3307
g82
g83
ssg71
g3301
sg64
(lp3308
S'Cache-Control'
p3309
asbag57
(g78
g59
NtRp3310
(dp3311
g62
(dp3312
g89
g90
ssg71
g3301
sg64
(lp3313
S':'
asbag57
(g78
g59
NtRp3314
(dp3315
g62
(dp3316
sg71
g3301
sg64
(lp3317
g57
(g58
g59
NtRp3318
(dp3319
g62
(dp3320
g70
I4
ssg71
g3314
sg64
(lp3321
S'no-store, no-cache, must-revalidate, post-check=0, pre-check=0'
p3322
asbasbasbag57
(g73
g59
NtRp3323
(dp3324
g62
(dp3325
sg71
g3297
sg64
(lp3326
g57
(g78
g59
NtRp3327
(dp3328
g62
(dp3329
g82
g83
ssg71
g3323
sg64
(lp3330
S'Content-Type'
p3331
asbag57
(g78
g59
NtRp3332
(dp3333
g62
(dp3334
g89
g90
ssg71
g3323
sg64
(lp3335
S':'
asbag57
(g78
g59
NtRp3336
(dp3337
g62
(dp3338
sg71
g3323
sg64
(lp3339
g57
(g58
g59
NtRp3340
(dp3341
g62
(dp3342
g70
I4
ssg71
g3336
sg64
(lp3343
S'text/html; charset=utf-8'
p3344
asbasbasbag57
(g73
g59
NtRp3345
(dp3346
g62
(dp3347
sg71
g3297
sg64
(lp3348
g57
(g78
g59
NtRp3349
(dp3350
g62
(dp3351
g82
g83
ssg71
g3345
sg64
(lp3352
S'Expires'
p3353
asbag57
(g78
g59
NtRp3354
(dp3355
g62
(dp3356
g89
g90
ssg71
g3345
sg64
(lp3357
S':'
asbag57
(g78
g59
NtRp3358
(dp3359
g62
(dp3360
sg71
g3345
sg64
(lp3361
g57
(g58
g59
NtRp3362
(dp3363
g62
(dp3364
g70
I4
ssg71
g3358
sg64
(lp3365
S'Mon, 26 Mar 2012 00:45:50 GMT'
p3366
asbasbasbag57
(g73
g59
NtRp3367
(dp3368
g62
(dp3369
sg71
g3297
sg64
(lp3370
g57
(g78
g59
NtRp3371
(dp3372
g62
(dp3373
g82
g83
ssg71
g3367
sg64
(lp3374
S'Pragma'
p3375
asbag57
(g78
g59
NtRp3376
(dp3377
g62
(dp3378
g89
g90
ssg71
g3367
sg64
(lp3379
S':'
asbag57
(g78
g59
NtRp3380
(dp3381
g62
(dp3382
sg71
g3367
sg64
(lp3383
g57
(g58
g59
NtRp3384
(dp3385
g62
(dp3386
g70
I4
ssg71
g3380
sg64
(lp3387
S'no-cache'
p3388
asbasbasbag57
(g73
g59
NtRp3389
(dp3390
g62
(dp3391
sg71
g3297
sg64
(lp3392
g57
(g78
g59
NtRp3393
(dp3394
g62
(dp3395
g82
g83
ssg71
g3389
sg64
(lp3396
S'X-Powered-By'
p3397
asbag57
(g78
g59
NtRp3398
(dp3399
g62
(dp3400
g89
g90
ssg71
g3389
sg64
(lp3401
S':'
asbag57
(g78
g59
NtRp3402
(dp3403
g62
(dp3404
sg71
g3389
sg64
(lp3405
g57
(g58
g59
NtRp3406
(dp3407
g62
(dp3408
g70
I4
ssg71
g3402
sg64
(lp3409
S'web2py'
p3410
asbasbasbasbasbasbasbag57
(g73
g59
NtRp3411
(dp3412
g62
(dp3413
sg71
g2919
sg64
(lp3414
g57
(g78
g59
NtRp3415
(dp3416
g62
(dp3417
g82
g83
ssg71
g3411
sg64
(lp3418
S'menu'
p3419
asbag57
(g78
g59
NtRp3420
(dp3421
g62
(dp3422
g89
g90
ssg71
g3411
sg64
(lp3423
S':'
asbag57
(g78
g59
NtRp3424
(dp3425
g62
(dp3426
sg71
g3411
sg64
(lp3427
g57
(g58
g59
NtRp3428
(dp3429
g62
(dp3430
g70
I5
ssg71
g3424
sg64
(lp3431
g57
(g66
g59
NtRp3432
(dp3433
g62
(dp3434
g70
I4
ssg71
Nsg64
(lp3435
g57
(g73
g59
NtRp3436
(dp3437
g62
(dp3438
sg71
g3432
sg64
(lp3439
g57
(g78
g59
NtRp3440
(dp3441
g62
(dp3442
sg71
g3436
sg64
(lp3443
g57
(g58
g59
NtRp3444
(dp3445
g62
(dp3446
g70
I4
ssg71
g3440
sg64
(lp3447
g57
(g66
g59
NtRp3448
(dp3449
g62
(dp3450
g70
I3
ssg71
Nsg64
(lp3451
g57
(g73
g59
NtRp3452
(dp3453
g62
(dp3454
sg71
g3448
sg64
(lp3455
g57
(g78
g59
NtRp3456
(dp3457
g62
(dp3458
sg71
g3452
sg64
(lp3459
g57
(g58
g59
NtRp3460
(dp3461
g62
(dp3462
g70
I3
ssg71
g3456
sg64
(lp3463
cgluon.languages
lazyT_unpickle
p3464
(S't\x04\x00\x00\x00Site'
tRp3465
asbasbasbag57
(g73
g59
NtRp3466
(dp3467
g62
(dp3468
sg71
g3448
sg64
(lp3469
g57
(g78
g59
NtRp3470
(dp3471
g62
(dp3472
sg71
g3466
sg64
(lp3473
g57
(g58
g59
NtRp3474
(dp3475
g62
(dp3476
g70
I3
ssg71
g3470
sg64
(lp3477
g611
asbasbasbag57
(g73
g59
NtRp3478
(dp3479
g62
(dp3480
sg71
g3448
sg64
(lp3481
g57
(g78
g59
NtRp3482
(dp3483
g62
(dp3484
sg71
g3478
sg64
(lp3485
g57
(g58
g59
NtRp3486
(dp3487
g62
(dp3488
g70
I3
ssg71
g3482
sg64
(lp3489
S'/admin/default/site'
p3490
asbasbasbasbasbasbasbag57
(g73
g59
NtRp3491
(dp3492
g62
(dp3493
sg71
g3432
sg64
(lp3494
g57
(g78
g59
NtRp3495
(dp3496
g62
(dp3497
sg71
g3491
sg64
(lp3498
g57
(g58
g59
NtRp3499
(dp3500
g62
(dp3501
g70
I4
ssg71
g3495
sg64
(lp3502
g57
(g66
g59
NtRp3503
(dp3504
g62
(dp3505
g70
I3
ssg71
Nsg64
(lp3506
g57
(g73
g59
NtRp3507
(dp3508
g62
(dp3509
sg71
g3503
sg64
(lp3510
g57
(g78
g59
NtRp3511
(dp3512
g62
(dp3513
sg71
g3507
sg64
(lp3514
g57
(g58
g59
NtRp3515
(dp3516
g62
(dp3517
g70
I3
ssg71
g3511
sg64
(lp3518
g3464
(S't\x06\x00\x00\x00Logout'
tRp3519
asbasbasbag57
(g73
g59
NtRp3520
(dp3521
g62
(dp3522
sg71
g3503
sg64
(lp3523
g57
(g78
g59
NtRp3524
(dp3525
g62
(dp3526
sg71
g3520
sg64
(lp3527
g57
(g58
g59
NtRp3528
(dp3529
g62
(dp3530
g70
I3
ssg71
g3524
sg64
(lp3531
g611
asbasbasbag57
(g73
g59
NtRp3532
(dp3533
g62
(dp3534
sg71
g3503
sg64
(lp3535
g57
(g78
g59
NtRp3536
(dp3537
g62
(dp3538
sg71
g3532
sg64
(lp3539
g57
(g58
g59
NtRp3540
(dp3541
g62
(dp3542
g70
I3
ssg71
g3536
sg64
(lp3543
S'/admin/default/logout'
p3544
asbasbasbasbasbasbasbag57
(g73
g59
NtRp3545
(dp3546
g62
(dp3547
sg71
g3432
sg64
(lp3548
g57
(g78
g59
NtRp3549
(dp3550
g62
(dp3551
sg71
g3545
sg64
(lp3552
g57
(g58
g59
NtRp3553
(dp3554
g62
(dp3555
g70
I4
ssg71
g3549
sg64
(lp3556
g57
(g66
g59
NtRp3557
(dp3558
g62
(dp3559
g70
I3
ssg71
Nsg64
(lp3560
g57
(g73
g59
NtRp3561
(dp3562
g62
(dp3563
sg71
g3557
sg64
(lp3564
g57
(g78
g59
NtRp3565
(dp3566
g62
(dp3567
sg71
g3561
sg64
(lp3568
g57
(g58
g59
NtRp3569
(dp3570
g62
(dp3571
g70
I3
ssg71
g3565
sg64
(lp3572
g3464
(S't\x04\x00\x00\x00Help'
tRp3573
asbasbasbag57
(g73
g59
NtRp3574
(dp3575
g62
(dp3576
sg71
g3557
sg64
(lp3577
g57
(g78
g59
NtRp3578
(dp3579
g62
(dp3580
sg71
g3574
sg64
(lp3581
g57
(g58
g59
NtRp3582
(dp3583
g62
(dp3584
g70
I3
ssg71
g3578
sg64
(lp3585
g611
asbasbasbag57
(g73
g59
NtRp3586
(dp3587
g62
(dp3588
sg71
g3557
sg64
(lp3589
g57
(g78
g59
NtRp3590
(dp3591
g62
(dp3592
sg71
g3586
sg64
(lp3593
g57
(g58
g59
NtRp3594
(dp3595
g62
(dp3596
g70
I3
ssg71
g3590
sg64
(lp3597
S'/examples/default/index'
p3598
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp3599
(dp3600
g62
(dp3601
sg71
g2919
sg64
(lp3602
g57
(g78
g59
NtRp3603
(dp3604
g62
(dp3605
g82
g83
ssg71
g3599
sg64
(lp3606
S'meta'
p3607
asbag57
(g78
g59
NtRp3608
(dp3609
g62
(dp3610
g89
g90
ssg71
g3599
sg64
(lp3611
S':'
asbag57
(g78
g59
NtRp3612
(dp3613
g62
(dp3614
sg71
g3599
sg64
(lp3615
g57
(g58
g59
NtRp3616
(dp3617
g62
(dp3618
g70
I5
ssg71
g3612
sg64
(lp3619
g57
(g66
g59
NtRp3620
(dp3621
g62
(dp3622
g70
I4
ssg71
Nsg64
(lp3623
sbasbasbasbag57
(g73
g59
NtRp3624
(dp3625
g62
(dp3626
sg71
g2919
sg64
(lp3627
g57
(g78
g59
NtRp3628
(dp3629
g62
(dp3630
g82
g83
ssg71
g3624
sg64
(lp3631
S'postprocessing'
p3632
asbag57
(g78
g59
NtRp3633
(dp3634
g62
(dp3635
g89
g90
ssg71
g3624
sg64
(lp3636
S':'
asbag57
(g78
g59
NtRp3637
(dp3638
g62
(dp3639
sg71
g3624
sg64
(lp3640
g57
(g58
g59
NtRp3641
(dp3642
g62
(dp3643
g70
I5
ssg71
g3637
sg64
(lp3644
g57
(g66
g59
NtRp3645
(dp3646
g62
(dp3647
g70
I4
ssg71
Nsg64
(lp3648
sbasbasbasbag57
(g73
g59
NtRp3649
(dp3650
g62
(dp3651
sg71
g2919
sg64
(lp3652
g57
(g78
g59
NtRp3653
(dp3654
g62
(dp3655
g82
g83
ssg71
g3649
sg64
(lp3656
S'session_file'
p3657
asbag57
(g78
g59
NtRp3658
(dp3659
g62
(dp3660
g89
g90
ssg71
g3649
sg64
(lp3661
S':'
asbag57
(g78
g59
NtRp3662
(dp3663
g62
(dp3664
sg71
g3649
sg64
(lp3665
g57
(g58
g59
NtRp3666
(dp3667
g62
(dp3668
g70
I5
ssg71
g3662
sg64
(lp3669
S"<open file '/Users/cyan/Package/GitHub/funback/web2py/applications/admin/sessions/127.0.0.1-5fd3a0e2-ea14-4f81-bfb5-f5621ef8750e', mode 'rb+' at 0x1019aef60>"
p3670
asbasbasbag57
(g73
g59
NtRp3671
(dp3672
g62
(dp3673
sg71
g2919
sg64
(lp3674
g57
(g78
g59
NtRp3675
(dp3676
g62
(dp3677
g82
g83
ssg71
g3671
sg64
(lp3678
S'session_filename'
p3679
asbag57
(g78
g59
NtRp3680
(dp3681
g62
(dp3682
g89
g90
ssg71
g3671
sg64
(lp3683
S':'
asbag57
(g78
g59
NtRp3684
(dp3685
g62
(dp3686
sg71
g3671
sg64
(lp3687
g57
(g58
g59
NtRp3688
(dp3689
g62
(dp3690
g70
I5
ssg71
g3684
sg64
(lp3691
S'/Users/cyan/Package/GitHub/funback/web2py/applications/admin/sessions/127.0.0.1-5fd3a0e2-ea14-4f81-bfb5-f5621ef8750e'
p3692
asbasbasbag57
(g73
g59
NtRp3693
(dp3694
g62
(dp3695
sg71
g2919
sg64
(lp3696
g57
(g78
g59
NtRp3697
(dp3698
g62
(dp3699
g82
g83
ssg71
g3693
sg64
(lp3700
S'session_id'
p3701
asbag57
(g78
g59
NtRp3702
(dp3703
g62
(dp3704
g89
g90
ssg71
g3693
sg64
(lp3705
S':'
asbag57
(g78
g59
NtRp3706
(dp3707
g62
(dp3708
sg71
g3693
sg64
(lp3709
g57
(g58
g59
NtRp3710
(dp3711
g62
(dp3712
g70
I5
ssg71
g3706
sg64
(lp3713
S'127.0.0.1-5fd3a0e2-ea14-4f81-bfb5-f5621ef8750e'
p3714
asbasbasbag57
(g73
g59
NtRp3715
(dp3716
g62
(dp3717
sg71
g2919
sg64
(lp3718
g57
(g78
g59
NtRp3719
(dp3720
g62
(dp3721
g82
g83
ssg71
g3715
sg64
(lp3722
S'session_id_name'
p3723
asbag57
(g78
g59
NtRp3724
(dp3725
g62
(dp3726
g89
g90
ssg71
g3715
sg64
(lp3727
S':'
asbag57
(g78
g59
NtRp3728
(dp3729
g62
(dp3730
sg71
g3715
sg64
(lp3731
g57
(g58
g59
NtRp3732
(dp3733
g62
(dp3734
g70
I5
ssg71
g3728
sg64
(lp3735
g2976
asbasbasbag57
(g73
g59
NtRp3736
(dp3737
g62
(dp3738
sg71
g2919
sg64
(lp3739
g57
(g78
g59
NtRp3740
(dp3741
g62
(dp3742
g82
g83
ssg71
g3736
sg64
(lp3743
S'session_locked'
p3744
asbag57
(g78
g59
NtRp3745
(dp3746
g62
(dp3747
g89
g90
ssg71
g3736
sg64
(lp3748
S':'
asbag57
(g78
g59
NtRp3749
(dp3750
g62
(dp3751
sg71
g3736
sg64
(lp3752
g57
(g58
g59
NtRp3753
(dp3754
g62
(dp3755
g70
I5
ssg71
g3749
sg64
(lp3756
g611
asbasbasbag57
(g73
g59
NtRp3757
(dp3758
g62
(dp3759
sg71
g2919
sg64
(lp3760
g57
(g78
g59
NtRp3761
(dp3762
g62
(dp3763
g82
g83
ssg71
g3757
sg64
(lp3764
S'session_new'
p3765
asbag57
(g78
g59
NtRp3766
(dp3767
g62
(dp3768
g89
g90
ssg71
g3757
sg64
(lp3769
S':'
asbag57
(g78
g59
NtRp3770
(dp3771
g62
(dp3772
sg71
g3757
sg64
(lp3773
g57
(g58
g59
NtRp3774
(dp3775
g62
(dp3776
g70
I5
ssg71
g3770
sg64
(lp3777
g611
asbasbasbag57
(g73
g59
NtRp3778
(dp3779
g62
(dp3780
sg71
g2919
sg64
(lp3781
g57
(g78
g59
NtRp3782
(dp3783
g62
(dp3784
g82
g83
ssg71
g3778
sg64
(lp3785
S'status'
p3786
asbag57
(g78
g59
NtRp3787
(dp3788
g62
(dp3789
g89
g90
ssg71
g3778
sg64
(lp3790
S':'
asbag57
(g78
g59
NtRp3791
(dp3792
g62
(dp3793
sg71
g3778
sg64
(lp3794
g57
(g58
g59
NtRp3795
(dp3796
g62
(dp3797
g70
I5
ssg71
g3791
sg64
(lp3798
S'200'
p3799
asbasbasbag57
(g73
g59
NtRp3800
(dp3801
g62
(dp3802
sg71
g2919
sg64
(lp3803
g57
(g78
g59
NtRp3804
(dp3805
g62
(dp3806
g82
g83
ssg71
g3800
sg64
(lp3807
S'subtitle'
p3808
asbag57
(g78
g59
NtRp3809
(dp3810
g62
(dp3811
g89
g90
ssg71
g3800
sg64
(lp3812
S':'
asbag57
(g78
g59
NtRp3813
(dp3814
g62
(dp3815
sg71
g3800
sg64
(lp3816
g57
(g58
g59
NtRp3817
(dp3818
g62
(dp3819
g70
I5
ssg71
g3813
sg64
(lp3820
S'admin'
p3821
asbasbasbag57
(g73
g59
NtRp3822
(dp3823
g62
(dp3824
sg71
g2919
sg64
(lp3825
g57
(g78
g59
NtRp3826
(dp3827
g62
(dp3828
g82
g83
ssg71
g3822
sg64
(lp3829
S'title'
p3830
asbag57
(g78
g59
NtRp3831
(dp3832
g62
(dp3833
g89
g90
ssg71
g3822
sg64
(lp3834
S':'
asbag57
(g78
g59
NtRp3835
(dp3836
g62
(dp3837
sg71
g3822
sg64
(lp3838
g57
(g58
g59
NtRp3839
(dp3840
g62
(dp3841
g70
I5
ssg71
g3835
sg64
(lp3842
S'check_version '
p3843
asbasbasbag57
(g73
g59
NtRp3844
(dp3845
g62
(dp3846
sg71
g2919
sg64
(lp3847
g57
(g78
g59
NtRp3848
(dp3849
g62
(dp3850
g82
g83
ssg71
g3844
sg64
(lp3851
g2036
asbag57
(g78
g59
NtRp3852
(dp3853
g62
(dp3854
g89
g90
ssg71
g3844
sg64
(lp3855
S':'
asbag57
(g78
g59
NtRp3856
(dp3857
g62
(dp3858
sg71
g3844
sg64
(lp3859
g57
(g58
g59
NtRp3860
(dp3861
g62
(dp3862
g70
I5
ssg71
g3856
sg64
(lp3863
g2049
asbasbasbag57
(g73
g59
NtRp3864
(dp3865
g62
(dp3866
sg71
g2919
sg64
(lp3867
g57
(g78
g59
NtRp3868
(dp3869
g62
(dp3870
g82
g83
ssg71
g3864
sg64
(lp3871
S'view'
p3872
asbag57
(g78
g59
NtRp3873
(dp3874
g62
(dp3875
g89
g90
ssg71
g3864
sg64
(lp3876
S':'
asbag57
(g78
g59
NtRp3877
(dp3878
g62
(dp3879
sg71
g3864
sg64
(lp3880
g57
(g58
g59
NtRp3881
(dp3882
g62
(dp3883
g70
I5
ssg71
g3877
sg64
(lp3884
S'default/check_version.html'
p3885
asbasbasbasbasbsS'locals'
p3886
(dp3887
S'version_number'
p3888
S"(1, 99, 7, datetime.datetime(2012, 3, 4, 22, 12, 8), 'stable')"
p3889
sS'new_version'
p3890
g100
sssS'traceback'
p3891
S'Traceback (most recent call last):\n  File "/Users/cyan/Package/GitHub/funback/web2py/gluon/restricted.py", line 204, in restricted\n    exec ccode in environment\n  File "/Users/cyan/Package/GitHub/funback/web2py/applications/admin/controllers/default.py", line 1341, in <module>\n  File "/Users/cyan/Package/GitHub/funback/web2py/gluon/globals.py", line 172, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/cyan/Package/GitHub/funback/web2py/applications/admin/controllers/default.py", line 113, in check_version\n    + XML(\' <strong class="upgrade_version">%s</strong>\' % version_number)\nTypeError: not all arguments converted during string formatting\n'
p3892
s.