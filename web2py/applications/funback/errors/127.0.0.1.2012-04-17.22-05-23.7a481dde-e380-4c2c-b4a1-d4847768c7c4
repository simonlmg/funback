(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'user_login'"
p3
sS'layer'
p4
S'/Users/cyan/Package/GitHub/funback/web2py/applications/funback/models/account.py'
p5
sS'code'
p6
S'#########################################\n## database model for account services ##\n#########################################\n\n## use PostgreSQL on dotcloud (staging/production)\n##db = DAL("pgsql://root:kZ2AxFUntkfwlBGCEa1N@funback-Cilia.dotcloud.com:21133")\n\n## use PostgreSQL on localhost (testing/qa)\ndb = DAL("postgres://cyan:opennow330@localhost/funback")\n\n## setup logging facilities for debugging purposes\nimport logging\nlogger = logging.getLogger("web2py.app.funback")\nlogger.setLevel(logging.DEBUG)\n\n#####################################\n## web2py authentication utilities ##\n#####################################\n\nfrom gluon.tools import Auth\nauth = Auth(db, hmac_key=Auth.get_or_create_key())\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = \'smtp.gmail.com:587\'\nmail.settings.sender = \'funback.message@gmail.com\'\nmail.settings.login = \'funback.message:opennow123\'\n\n## for the use of reCAPTCHA (with publicly visible site only)\n#auth.settings.captcha = Recaptcha(request, \'PUBLIC_KEY\', \'PRIVATE_KEY\', option="theme:\'clean\', lang:\'en\'")\n\n## re-name the authentication tables\n#===============================================================================\n# auth.settings.table_user_name = "user_login"\n# auth.settings.table_group_name = "user_group"\n# auth.settings.table_membership_name = "user_membership"\n# auth.settings.table_permission_name = "user_permission"\n# auth.settings.table_event_name = "user_event"\n#===============================================================================\n\n## create all tables needed by Auth\nauth.define_tables()\n\n## disable the default group creation behavior upon each user creation\nauth.settings.create_user_groups = False\n## turn on email verification upon registration and password reset\nauth.settings.registration_requires_verification = True\nauth.settings.reset_password_requires_verification = True\n## might need to change this for company users\n#auth.settings.registration_requires_approval = False \n\n## set the content of the verification email\n#===============================================================================\n# auth.messages.verify_email = \'Please click on the link: http://\' + \\\n#    request.env.http_host + \\\n#    URL(r=request,c=\'account\',f=\'verify_email\') + \\\n#    \'/%(key)s to verify your email address\'\n# logger.debug("verification email content: %s" % auth.messages.verify_email)\n#===============================================================================\n\nauth.messages.verify_email = \'test test test\'\nlogger.debug("verification email content: %s" % auth.messages.verify_email)\n\n## customize the Auth tables\n## abandon (but not remove) \'first_name\' and \'last_name\' from user_login table\ndb.user_login.first_name.writable = db.user_login.last_name.writable = False\ndb.user_login.first_name.readable = db.user_login.last_name.readable = False\n## set the email requirement\ndb.user_login.email.requires = [IS_NOT_EMPTY(), \n                             IS_EMAIL(),\n                             IS_NOT_IN_DB(db, \'user_login.email\')]\n#forced=\'^.*\\.edu(|\\..*)$\', error_message=\'Email must be an .edu address\'\n\n## set the password requirement\ndb.user_login.password.requires = [IS_NOT_EMPTY(), \n                                IS_STRONG(min=7, special=0, upper=0, number=0, error_message=\'Minimum 7 characters\'), \n                                CRYPT()]\n\n## setup the user group structure (should be setup one-for-all outside the app)\n#auth.add_group(\'prospect\', \'participants of events\')\n#auth.add_group(\'prospector\', \'hosts of events\')\n\n######################\n## Custom DB tables ##\n######################\n\n#db.define_table(\'login\',\n#    Field(\'email\', length=96, required=True, unique=True),\n#    Field(\'pwd\', length=36, required=True, readable=False, writable=False))\n\n#db.login.email.requires=[IS_EMAIL(), IS_NOT_IN_DB(db, \'login.email\')]\n#db.login.pwd.requires=[IS_NOT_EMPTY(), IS_STRONG(min=6, special=0, upper=1), CRYPT()]\n\ndb.define_table(\'participant\',\n    Field(\'login_id\', db.user_login, readable=False, writable=False),\n    Field(\'first_name\', length=128, required=True),\n    Field(\'last_name\', length=128, required=True),\n    Field(\'sex\', required=True),\n    Field(\'dob\', \'date\'),\n    Field(\'country\'),\n    format=\'%(first_name)s %(last_name)s\')\n\ndb.participant.sex.requires = IS_IN_SET([\'male\',\'female\'])\ndb.participant.country.requires = IS_IN_SET([\'United States\',\'United Kingdom\'])\ndb.participant.login_id.requires = IS_IN_DB(db, db.user_login.id, \'%(email)s\')'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/cyan/Package/GitHub/funback/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/Users/cyan/Package/GitHub/funback/web2py/applications/funback/models/account.py", line 66, in <module>\n    db.user_login.first_name.writable = db.user_login.last_name.writable = False\n  File "/Users/cyan/Package/GitHub/funback/web2py/gluon/dal.py", line 6343, in __getattr__\n    return self[key]\n  File "/Users/cyan/Package/GitHub/funback/web2py/gluon/dal.py", line 6337, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'user_login\'\n'
p11
s.