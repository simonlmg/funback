(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'vars'"
p3
sS'layer'
p4
S'/Users/cyan/Package/GitHub/funback/web2py/applications/funback/controllers/account.py'
p5
sS'code'
p6
S'##########################\n### Account Controller ###\n##########################\n\n## Deal with all the following functionalities relating to accounts\n## 1. account creation/registration\n## 2. email confirmation\n## 3. rest password\n## 4. change password\n\n#===============================================================================\n# Use the Auth functions provided by Web2py\n# use @auth.requires_login()\n# @auth.requires_membership(\'group name\')\n# @auth.requires_permission(\'read\',\'table name\',record_id)\n# to decorate functions that need access control\n#===============================================================================\n\n\ndef register():\n    """\n    exposes:\n    http://..../[app]/account/register\n    """\n    \n    form = auth.register()\n    return dict(form=form)\n\ndef verify_email():\n    """\n    exposes:\n    http://..../[app]/account/verify_email\n    """\n    return dict(form=auth.verify_email())\n\ndef login():\n    """\n    exposes:\n    http://..../[app]/account/login\n    """\n    return dict(form=auth.login())\n\ndef logout():\n    """\n    exposes:\n    http://..../[app]/account/logout\n    """\n    return dict(form=auth.logout())\n\ndef retrieve_password():\n    """\n    exposes:\n    http://..../[app]/account/retrieve_password\n    """\n    return dict(form=auth.retrieve_password())\n\ndef change_password():\n    """\n    exposes:\n    http://..../[app]/account/change_password\n    """\n    return dict(form=auth.change_password())\n\ndef profile():\n    """\n    exposes:\n    http://..../[app]/account/profile\n    """\n    return dict(form=auth.profile())\n\n\n#===============================================================================\n# def register():\n#    form = SQLFORM.factory(\n#        Field(\'email\', requires=[IS_NOT_EMPTY(), \n#                                IS_EMAIL(forced=\'^.*\\.edu(|\\..*)$\', error_message=\'email must be .edu address\')]),\n#        Field(\'password\', \'password\', requires=[IS_NOT_EMPTY(), \n#                                            IS_STRONG(min=7, special=0, upper=0, number=0, error_message=\'minimum 7 characters\'), \n#                                            CRYPT()]),\n#        Field(\'re_password\', \'password\', requires=[IS_EXPR(\'value==%s\' % repr(request.vars.get(\'password\', None)), error_message=\'Passwords do not match\'), \n#                                                CRYPT()]),\n#        submit_button=\'Sign up\')\n#    if form.process().accepted:\n#        session.email = form.vars.email\n#        session.pwd = form.vars.pwd\n#        redirect(URL(\'registered\'))\n#    return dict(form=form)\n#===============================================================================\n\ndef registered():\n    if not request.function==\'register\' and not session.email:\n        redirect(URL(\'register\'))\n    return dict()\nresponse._vars=response._caller(verify_email)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/cyan/Package/GitHub/funback/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/Users/cyan/Package/GitHub/funback/web2py/applications/funback/controllers/account.py", line 94, in <module>\n  File "/Users/cyan/Package/GitHub/funback/web2py/gluon/globals.py", line 173, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/cyan/Package/GitHub/funback/web2py/applications/funback/controllers/account.py", line 34, in verify_email\n    return dict(form=auth.verify_email())\n  File "/Users/cyan/Package/GitHub/funback/web2py/gluon/tools.py", line 2020, in verify_email\n    callback(onaccept,user)\n  File "/Users/cyan/Package/GitHub/funback/web2py/gluon/tools.py", line 57, in callback\n    [action(form) for action in actions]\n  File "/Users/cyan/Package/GitHub/funback/web2py/applications/funback/models/account.py", line 52, in <lambda>\n    auth.settings.verify_email_onaccept.append(lambda form: mail.send(to=form.vars.email, subject=\'Welcome to Funback\',\n  File "/Users/cyan/Package/GitHub/funback/web2py/gluon/dal.py", line 5657, in __getattr__\n    return self[key]\n  File "/Users/cyan/Package/GitHub/funback/web2py/gluon/dal.py", line 5648, in __getitem__\n    return dict.__getitem__(self, key)\nKeyError: \'vars\'\n'
p11
s.